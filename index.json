[{"content":"Motivation How is work? ","permalink":"https://yuhaoo00.github.io/posts/taming-transformers-for-high-resolution-image-synthesis/","summary":"Motivation How is work? ","title":"Taming transformers for high-resolution image synthesis"},{"content":"","permalink":"https://yuhaoo00.github.io/posts/on-distillation-of-guided-diffusion-models/","summary":"","title":"On Distillation of Guided Diffusion Models"},{"content":"","permalink":"https://yuhaoo00.github.io/posts/snapshots/2302contorlnet/","summary":"","title":"[Paper Snapshot] Adding Conditional Control to Text-to-Image Diffusion Models"},{"content":"","permalink":"https://yuhaoo00.github.io/posts/dpm-solver-a-fast-ode-solver-for-diffusion-probabilistic-model-sampling-in-around-10-steps/","summary":"","title":"DPM-Solver' A Fast ODE Solver for Diffusion Probabilistic Model Sampling in Around 10 Steps"},{"content":"","permalink":"https://yuhaoo00.github.io/posts/score-based-diffusion-models-for-accelerated-mri/","summary":"","title":"Score-based diffusion models for accelerated MRI"},{"content":"","permalink":"https://yuhaoo00.github.io/posts/score-based-generative-modeling-through-stochastic-differential-equations/","summary":"","title":"Score-Based Generative Modeling through Stochastic Differential Equations"},{"content":"","permalink":"https://yuhaoo00.github.io/posts/video-diffusion-models/","summary":"","title":"Video Diffusion Models"},{"content":"","permalink":"https://yuhaoo00.github.io/posts/improving-diffusion-models-for-inverse-problems-using-manifold-constraints/","summary":"","title":"Improving Diffusion Models for Inverse Problems using Manifold Constraints"},{"content":"","permalink":"https://yuhaoo00.github.io/posts/zero-shot-image-restoration-using-denoising-diffusion-null-space-model/","summary":"","title":"Zero-Shot Image Restoration Using Denoising Diffusion Null-Space Model"},{"content":" Although Diffusion Model is a new generative framework, it still has many shades of other methods.\nGenerative \u0026amp; Diffusion Just like GANs realized the implicit generation through the mapping from a random gaussian vector to a natural image, Diffusion Model is doing the same thing, by multiple mappings, though. This generation can be defined as follows: $$p_\\theta\\left(x_0\\right)=\\int p_\\theta\\left(x_{0: T}\\right) \\mathrm{d} x_{1: T}$$ $$p_\\theta\\left(x_{0: T}\\right):=p_\\theta\\left(x_T\\right) \\prod_{t=1}^T p_\\theta^{(t)}\\left(x_{t-1} \\mid x_t\\right)$$ Similar to VAE, we can use the posterior $q(x_{1:t} \\mid x_0)$ to do the estimation for $\\theta$. The difference is that $x_1,\\dots,x_T$ are the latents of the same size as $x_0$, and the diffusion process (c.t. VAE encoder) $q(x_{1:T} \\mid x_0)$ is fixed to a Markov chain, which can be defined as Gaussian transitions parameterized by a decreasing sequence $\\alpha_{1:T}\\in [0,1]^T$ : $$ q(x_{1:T} \\mid x_0) := \\prod_{t=1}^T q\\left(x_{t} \\mid x_{t-1}\\right) $$ $$ q(x_t \\mid x_{t-1}):=N(\\frac{\\sqrt{\\alpha_t}}{\\sqrt{\\alpha_{t-1}}}x_{t-1}, (1-\\frac{\\alpha_t}{\\alpha_{t-1}})I) $$\nMarkov chain: What happens next depends only on the state of affairs now. So we have $q(x_t\\mid x_{0:t-1})=q(x_t\\mid x_{t-1})$\nA nice property of the above design (thank to Gauss.) is that it admits sampling $x_t$ at arbitrary timestep $t$: $$ q(x_t\\mid x_0)=N(x_t;\\sqrt{\\alpha_t}x_0, (1-\\alpha_t)I) $$\nTraining Objective We can use the variational lower bound (appeared in VAE) to maximize the negative log-likelihood: $$ \\max_{\\theta}E_{q}[\\log{p_\\theta(x_0)}]\\leq \\max_{\\theta}E_{q}[\\log{p_{\\theta} (x_{0:T})}-\\log{q(x_{1:T} \\mid x_0)}] $$ which also can be driven by Jensen’s inequality as in Lil\u0026rsquo;log. And we can further rewrite this object as: where $L_T$ is constant. Discussing $L_{t-1}$ is one of the key contributions of DDPMs. Using Bayes\u0026rsquo; rule, we can deduce the fact that $q(x_{t-1}\\mid x_t, x_0)$ is a gaussian distribution. Therefore, if forward variances is all fixed, we can simplify this objective as follows with parameterization tricks (fit distribution $\\to$ fit mean $\\to$ predict noise) and empirical results. $$ L_t=E_{x_0\\sim q, \\epsilon\\sim N(0,1)}\\left[|| \\epsilon_\\theta(\\sqrt{\\alpha_t}x_0+\\sqrt{1-\\alpha_t}\\epsilon, t)-\\epsilon {||}_2^2 \\right] $$\nNCSNs vs DDPMs, different ways lead to almost the same objective!\nFor last $L_0$, DDPMs treat it as an independent a discrete decoder derived from $N(x_0;\\mu_{\\theta}(x_1,1), 0)$, so it can be trained by the same objective as $L_t$. Notice that this last generative process is set to noiseless to ensure the lossless codelength of discrete data.\nAt the end, we can realize the efficient training by optimizing random terms of $L_t$ with stochastic gradient descent (Alg. 1). Correspondingly, the sampling can be exported by $p_\\theta(x_{t-1}\\mid x_t)$ using predicted $\\epsilon_\\theta(\\cdot)$ (Alg. 2). If all mathematical derivations are funny like this \u0026hellip;\nDDPM+ DDIM One More Thing ","permalink":"https://yuhaoo00.github.io/posts/collections/2212ddpm/","summary":"Although Diffusion Model is a new generative framework, it still has many shades of other methods.\nGenerative \u0026amp; Diffusion Just like GANs realized the implicit generation through the mapping from a random gaussian vector to a natural image, Diffusion Model is doing the same thing, by multiple mappings, though. This generation can be defined as follows: $$p_\\theta\\left(x_0\\right)=\\int p_\\theta\\left(x_{0: T}\\right) \\mathrm{d} x_{1: T}$$ $$p_\\theta\\left(x_{0: T}\\right):=p_\\theta\\left(x_T\\right) \\prod_{t=1}^T p_\\theta^{(t)}\\left(x_{t-1} \\mid x_t\\right)$$ Similar to VAE, we can use the posterior $q(x_{1:t} \\mid x_0)$ to do the estimation for $\\theta$.","title":"DDPMs and Early Variants"},{"content":" Both likelihood-based methods and GAN methods have have some intrinsic limitations. Learning and estimating Stein score (the gradient of the log-density function) may be a better choice than learning the data density directly.\nScore Estimation (for training) We want to train a network $s_{\\theta}(x)$ to estimate $\\nabla_{ x} \\log p_{\\text {data }}( x)$, but how can we get the ground truth (real score)? In this paper, the objective $\\frac{1}{2} E_{p_{\\text{data}}} \\lbrack\\lVert s_{\\boldsymbol{\\theta}}( x)-\\nabla_{ x} \\log p_{\\text{data}}( x)\\rVert_2^2\\rbrack$ is equivalent to the following by Score Matching:\n$$ E_{p_{\\text{data}}}\\left[tr(\\nabla_{ x}s_{\\boldsymbol{\\theta}}( x))+\\frac{1}{2}\\left|s_{\\boldsymbol{\\theta}}( x))\\right|_2^2\\right] $$\nUnfortunately, it is not easy to compute $tr(\\cdot)$ for a large-scale problem. Both Denoising score matching and Sliced score matching are popular methods to deal with this situation. But the sliced one requires 4x computations due to the forward mode auto-differentiation. Instead, Denoising score matching try to estimate the score of noise-perturbed distribution ($q_\\sigma$) as follows:\n$$ \\frac{1}{2} E_{q_\\sigma(\\tilde{ x} \\mid x) p_{\\text {data }}( x)}\\left[\\left| s_{\\boldsymbol{\\theta}}(\\tilde{ x})-\\nabla_{\\tilde{ x}} \\log q_\\sigma(\\tilde{ x} \\mid x)\\right|_2^2\\right] $$\nMinimizing this objective, we can get $s_{\\boldsymbol{\\theta}}( x)=\\nabla_{ x} \\log q_{\\sigma}( x)$. And if the noise is small enough $q_\\sigma( x) \\approx p_{\\text {data }}( x)$, we will get $s_{\\boldsymbol{\\theta}}( x)=\\nabla_{ x} \\log q_\\sigma( x) \\approx \\nabla_{ x} \\log p_{\\text {data }}( x)$. As $q_\\sigma(\\tilde{x}| x)$ can be defined as a known simple distribution, this minimization is easier than regular score matching. In this paper, they choose $q_\\sigma(\\tilde{x}| x) =N\\left(\\tilde{x} \\mid x, \\sigma^2 I\\right)$, which leads to: $$\\ell(\\boldsymbol{\\theta} ; \\sigma) \\triangleq \\frac{1}{2} \\mathbb{E}{p{\\text {data }}(\\mathbf{x})} \\mathbb{E}{\\tilde{\\mathbf{x}} \\sim \\mathcal{N}\\left(\\mathbf{x}, \\sigma^2 I\\right)}\\left[\\left|\\mathbf{s}{\\boldsymbol{\\theta}}(\\tilde{\\mathbf{x}}, \\sigma)+\\frac{\\tilde{\\mathbf{x}}-\\mathbf{x}}{\\sigma^2}\\right|_2^2\\right]$$\nLangevin dynamics (for inference) How can we do sampling from $p_{\\text {data }}( x)$ when we get a nice estimation of $\\nabla_{ x} \\log p_{\\text {data }}( x)$? Just along the direction of this gradient? Yes, but plus more tricks.\n$$ x_t = x_{t-1}+\\frac{\\epsilon}{2} \\nabla_{x} \\log p\\left(x_{t-1}\\right)+\\sqrt{\\epsilon} z_t $$\nThe Annealed Langevin dynamics, which is based on assumptions for particle motion, can provide more stable distribution! Briefly, the random noise term $\\mathbf{z}_t \\thicksim N(0,1)$ simulates the random motion of particles. With gradual annealing (the step size $\\epsilon \\to 0$), the iterative $x_t$ will approach the distribution $p(x)$.\nPractical Challenges The manifold hypothesis The data in the real world tend to concentrate on low dimensional manifolds embedded in a high dimensional space (a.k.a., the ambient space).\nThe score is undefined. The estimation by Score Matching isn\u0026rsquo;t consistent. If we perturb the data with a small Gaussian noise (make the support of data distribution is the whole space), the loss driven by SlicedScoreMatching (fast \u0026amp; faithful) will converge (Fig. 1).\nFigure 1: Left: Sliced score matching (SSM) loss w.r.t. iterations. No noise is added to data. Right: Same but data are perturbed with N(0, 0.0001).\nLow data density regions Our training is based on the data in high density ($\\thicksim p_{\\text {data }}( x)$).\nThe estimation in low density regions is inaccurate. Regular Langevin Dynamics can\u0026rsquo;t be able to correctly recover the relative weights of the multi-modal distribution in reasonable time. If we perturb the data by using multiple noise levels (anneal down), we can fill the low density regions.\nSo naturally, we can kill three birds with Denoising Score Matching! Large-scale estimation, Whole space support, and Filling low density regions. (Indeed, the authors emphasize that empirically sliced score matching can train NCSNs as well as denoising score matching.)\nOne More Thing In the score matching, the authors approximately have $\\left| s_{\\theta}( x, \\sigma)\\right|_2 \\propto 1 / \\sigma$, so they choose $\\lambda (\\sigma) = \\sigma^2$ to make the order magnitude of loss under various noise levels roughly the same, and independent of $\\sigma$.\n$$ \\mathcal{L}\\left(\\theta ;\\lbrace\\sigma_i \\rbrace_{i=1}^{L}\\right) \\triangleq \\frac{1}{L} \\sum_{i=1}^L \\lambda\\left(\\sigma_i\\right) \\ell\\left(\\theta ; \\sigma_i\\right) $$\nCorrespondingly, in the langevin dynamics, they choose $\\alpha_i \\propto \\sigma^2$ to make the order magnitude of \u0026ldquo;signal-to-noise ratio\u0026rdquo; independent of $\\sigma$.\nReferences Yang Song and Stefano Ermon, ‘Generative Modeling by Estimating Gradients of the Data Distribution’, in Advances in Neural Information Processing Systems (Curran Associates, Inc., 2019) ","permalink":"https://yuhaoo00.github.io/posts/snapshots/2212ncsn/","summary":"Both likelihood-based methods and GAN methods have have some intrinsic limitations. Learning and estimating Stein score (the gradient of the log-density function) may be a better choice than learning the data density directly.\nScore Estimation (for training) We want to train a network $s_{\\theta}(x)$ to estimate $\\nabla_{ x} \\log p_{\\text {data }}( x)$, but how can we get the ground truth (real score)? In this paper, the objective $\\frac{1}{2} E_{p_{\\text{data}}} \\lbrack\\lVert s_{\\boldsymbol{\\theta}}( x)-\\nabla_{ x} \\log p_{\\text{data}}( x)\\rVert_2^2\\rbrack$ is equivalent to the following by Score Matching:","title":"[Paper Snapshot] Generative Modeling by Estimating Gradients of the Data Distribution"},{"content":"","permalink":"https://yuhaoo00.github.io/posts/come-closer-diffuse-faster-accelerating-conditional-diffusion-models-for-inverse-problems-through-stochastic-contraction/","summary":"","title":"Come-Closer-Diffuse-Faster' Accelerating Conditional Diffusion Models for Inverse Problems Through Stochastic Contraction"}]