[{"content":"Motivation How is work? ","date":"2023-09-26T00:00:00Z","permalink":"https://yuhaoo00.github.io/p/taming-transformers-for-high-resolution-image-synthesis/","title":"Taming transformers for high-resolution image synthesis"},{"content":"","date":"2023-05-18T00:00:00Z","permalink":"https://yuhaoo00.github.io/p/on-distillation-of-guided-diffusion-models/","title":"On Distillation of Guided Diffusion Models"},{"content":"","date":"2023-02-24T00:00:00Z","permalink":"https://yuhaoo00.github.io/p/adding-conditional-control-to-text-to-image-diffusion-models/","title":"Adding Conditional Control to Text-to-Image Diffusion Models"},{"content":"","date":"2023-01-01T00:00:00Z","permalink":"https://yuhaoo00.github.io/p/dpm-solver-a-fast-ode-solver-for-diffusion-probabilistic-model-sampling-in-around-10-steps/","title":"DPM-Solver' A Fast ODE Solver for Diffusion Probabilistic Model Sampling in Around 10 Steps"},{"content":"","date":"2023-01-01T00:00:00Z","permalink":"https://yuhaoo00.github.io/p/score-based-diffusion-models-for-accelerated-mri/","title":"Score-based diffusion models for accelerated MRI"},{"content":"","date":"2022-12-15T00:00:00Z","permalink":"https://yuhaoo00.github.io/p/score-based-generative-modeling-through-stochastic-differential-equations/","title":"Score-Based Generative Modeling through Stochastic Differential Equations"},{"content":"","date":"2022-12-15T00:00:00Z","permalink":"https://yuhaoo00.github.io/p/video-diffusion-models/","title":"Video Diffusion Models"},{"content":"","date":"2022-12-13T00:00:00Z","permalink":"https://yuhaoo00.github.io/p/improving-diffusion-models-for-inverse-problems-using-manifold-constraints/","title":"Improving Diffusion Models for Inverse Problems using Manifold Constraints"},{"content":"","date":"2022-12-11T00:00:00Z","permalink":"https://yuhaoo00.github.io/p/zero-shot-image-restoration-using-denoising-diffusion-null-space-model/","title":"Zero-Shot Image Restoration Using Denoising Diffusion Null-Space Model"},{"content":"Denoising Diffusion Probabilistic Models Denoising Diffusion Implicit Models Improved Denoising Diffusion Probabilistic Models High-Resolution Image Synthesis With Latent Diffusion Models\n","date":"2022-12-09T00:00:00Z","permalink":"https://yuhaoo00.github.io/p/denoising-diffusion-probabilistic-models/","title":"Denoising Diffusion Probabilistic Models"},{"content":"","date":"2022-12-08T00:00:00Z","permalink":"https://yuhaoo00.github.io/p/come-closer-diffuse-faster-accelerating-conditional-diffusion-models-for-inverse-problems-through-stochastic-contraction/","title":"Come-Closer-Diffuse-Faster' Accelerating Conditional Diffusion Models for Inverse Problems Through Stochastic Contraction"},{"content":" Both likelihood-based methods and GAN methods have have some intrinsic limitations. Learning and estimating Stein score (the gradient of the log-density function) may be a better choice than learning the data density directly.\nScore Estimation (for training) We want to train a network $s_{\\theta}(x)$ to estimate $\\nabla_{\\mathbf{x}} \\log p_{\\text {data }}(\\mathbf{x})$, but how can we get the ground truth (real score)? In this paper, the objective $\\frac{1}{2} \\mathbb{E}{p{\\text {data }}}\\left[\\left|\\mathbf{s}{\\boldsymbol{\\theta}}(\\mathbf{x})-\\nabla{\\mathbf{x}} \\log p_{\\text {data }}(\\mathbf{x})\\right|_2^2\\right]$ is equivalent to the following by Score Matching: $$ a=b $$\n$$ \\mathbb{E}{p{\\text {data }}}\\left[tr(\\nabla_{\\mathbf{x}}\\mathbf{s}{\\boldsymbol{\\theta}}(\\mathbf{x}))+\\frac{1}{2}\\left|\\mathbf{s}{\\boldsymbol{\\theta}}(\\mathbf{x}))\\right|_2^2\\right] $$\nUnfortunately, it is not easy to compute $tr(\\cdot)$ for a large-scale problem. Both Denoising score matching and Sliced score matching are popular methods to deal with this situation. But the sliced one requires 4x computations due to the forward mode auto-differentiation. Instead, Denoising score matching try to estimate the score of noise-perturbed distribution ($q_\\sigma$) as follows:\n$$ \\frac{1}{2} \\mathbb{E}{q\\sigma(\\tilde{\\mathbf{x}} \\mid \\mathbf{x}) p_{\\text {data }}(\\mathbf{x})}\\left[\\left|\\mathbf{s}{\\boldsymbol{\\theta}}(\\tilde{\\mathbf{x}})-\\nabla{\\tilde{\\mathbf{x}}} \\log q_\\sigma(\\tilde{\\mathbf{x}} \\mid \\mathbf{x})\\right|_2^2\\right] $$\nAs $q_\\sigma(\\tilde{\\mathbf{x}}|\\mathbf{x})$ can be defined as a known simple distribution (e.g. gaussian), this minimization is easier than estimating the original one. And we can get $\\mathbf{s}{\\boldsymbol{\\theta}}(\\mathbf{x})=\\nabla{\\mathbf{x}} \\log q_{\\sigma}(\\mathbf{x})$. So, when the noise is small enough ($q_\\sigma(\\mathbf{x}) \\approx p_{\\text {data }}(\\mathbf{x})$), we will get $\\mathbf{s}{\\boldsymbol{\\theta}}(\\mathbf{x})=\\nabla{\\mathbf{x}} \\log q_\\sigma(\\mathbf{x}) \\approx \\nabla_{\\mathbf{x}} \\log p_{\\text {data }}(\\mathbf{x})$.\nLangevin dynamics (for inference) How can we do sampling from $p_{\\text {data }}(\\mathbf{x})$ when we get a nice estimation of $\\nabla_{\\mathbf{x}} \\log p_{\\text {data }}(\\mathbf{x})$? Just along the direction of this gradient? Yes, but plus more tricks.\n$$ \\tilde{\\mathbf{x}}t=\\tilde{\\mathbf{x}}{t-1}+\\frac{\\epsilon}{2} \\nabla_{\\mathbf{x}} \\log p\\left(\\tilde{\\mathbf{x}}_{t-1}\\right)+\\sqrt{\\epsilon} \\mathbf{z}_t $$\nThe Annealed Langevin dynamics, which is based on assumptions for particle motion, can provide more stable distribution! Briefly, the random noise term $\\mathbf{z}_t \\thicksim N(0,1)$ simulates the random motion of particles. With gradual annealing (the step size $\\epsilon \\to 0$), the iterative $x_t$ will approach the distribution $p(x)$.\nPractical Challenges The manifold hypothesis The data in the real world tend to concentrate on low dimensional manifolds embedded in a high dimensional space (a.k.a., the ambient space).\nThe score is undefined. The estimation by Score Matching isn\u0026rsquo;t consistent. If we perturb the data with a small Gaussian noise (make the support of data distribution is the whole space), the loss driven by SlicedScoreMatching (fast \u0026amp; faithful) will converge (Fig. 1).\nLow data density regions Our training is based on the data in high density ($\\thicksim p_{\\text {data }}(\\mathbf{x})$).\nThe estimation in low density regions is inaccurate. Regular Langevin Dynamics can\u0026rsquo;t be able to correctly recover the relative weights of the multi-modal distribution in reasonable time. If we perturb the data by using multiple noise levels (anneal down), we can fill the low density regions.\nSo naturally, we can kill three birds with Denoising Score Matching! Large-scale estimation, Whole space support, and Filling low density regions. (Indeed, the authors emphasize that empirically sliced score matching can train NCSNs as well as denoising score matching.)\nOne More Thing In the score matching, the authors approximately have $\\left|\\mathbf{s}_{\\boldsymbol{\\theta}}(\\mathbf{x}, \\sigma)\\right|_2 \\propto 1 / \\sigma$, so they choose $\\lambda (\\sigma) = \\sigma^2$ to make the order magnitude of loss under various noise levels roughly the same, and independent of $\\sigma$.\n$$ \\mathcal{L}\\left(\\boldsymbol{\\theta} ;\\left{\\sigma_i\\right}{i=1}^L\\right) \\triangleq \\frac{1}{L} \\sum{i=1}^L \\lambda\\left(\\sigma_i\\right) \\ell\\left(\\boldsymbol{\\theta} ; \\sigma_i\\right) $$\nCorrespondingly, in the langevin dynamics, they choose $\\alpha_i \\propto \\sigma^2$ to make the order magnitude of \u0026ldquo;signal-to-noise ratio\u0026rdquo; independent of $\\sigma$.\nReferences Yang Song and Stefano Ermon, ‘Generative Modeling by Estimating Gradients of the Data Distribution’, in Advances in Neural Information Processing Systems (Curran Associates, Inc., 2019) ","date":"2022-12-08T00:00:00Z","permalink":"https://yuhaoo00.github.io/p/generative-modeling-by-estimating-gradients-of-the-data-distribution/","title":"Generative Modeling by Estimating Gradients of the Data Distribution"}]