<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Mem.Capsule ðŸ’Š</title>
    <link>https://yuhaoo00.github.io/posts/</link>
    <description>Recent content in Posts on Mem.Capsule ðŸ’Š</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Tue, 26 Sep 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://yuhaoo00.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Generating Images Like Texts</title>
      <link>https://yuhaoo00.github.io/posts/snapshots/2309arforvisiongeneration/</link>
      <pubDate>Tue, 26 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://yuhaoo00.github.io/posts/snapshots/2309arforvisiongeneration/</guid>
      <description>&lt;p&gt;Can we generate images in the same way as autoregressive language model?&lt;/p&gt;
&lt;p&gt;Although this sounds simpler than diffusion models, we still need to deal with many computational cost problems. But don&amp;rsquo;t worry too much, there are serval brilliant methods to try to make this idea more competitive.&lt;/p&gt;
&lt;h2 id=&#34;taming-transformer&#34; class=&#34;icon-inline&#34; id=&#34;taming-transformer&#34;&gt;Taming Transformer&lt;a class=&#34;icon-link&#34; href=&#34;#taming-transformer&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://openaccess.thecvf.com/content/CVPR2021/html/Esser_Taming_Transformers_for_High-Resolution_Image_Synthesis_CVPR_2021_paper.html?ref=https://githubhelp.com&#34;&gt;-&amp;gt; Patrick Esser, et al. CVPR 2021&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The key challenge of autoregressive generation is how to solve the quadratically increasing cost of image sequences that are much longer than texts. For this sake, the Taming Transformer is designed as a two-stage approach including a VQGAN and an Autoregressive Transformer.&lt;/p&gt;
&lt;h3 id=&#34;11-vq-gan&#34; class=&#34;icon-inline&#34; id=&#34;11-vq-gan&#34;&gt;1.1 VQ-GAN&lt;a class=&#34;icon-link&#34; href=&#34;#11-vq-gan&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231026163628.png&#34; loading=&#34;lazy&#34;&gt;
&lt;figcaption&gt;
Summary of taming transformer&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://proceedings.neurips.cc/paper_files/paper/2017/file/7a98af17e63a0ac09ce2e96d03992fbc-Paper.pdf&#34;&gt;Vector quantization&lt;/a&gt; is a brilliant idea to provide the compression and discrete representation for images (like a image tokenizer). Inspired by that, VQ-GAN realizes more effective representation with &lt;a href=&#34;https://openaccess.thecvf.com/content_cvpr_2017/html/Isola_Image-To-Image_Translation_With_CVPR_2017_paper.html&#34;&gt;patchGAN&lt;/a&gt;, compressing an image into a learnable space (codebook). More precisely, any image $x\in R^{H\times W\times 3}$ can be represented by &lt;strong&gt;a discrete vector&lt;/strong&gt; $s \in R^{hÃ—w}$ (an index set of the closest codebook entries).&lt;/p&gt;
&lt;p&gt;The training objective for finding the optimal compression model can be expressed as:&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
&amp;amp;L_{VQ}=L_{perceptual}+||sg(E(x))-z_q||^2_2+\beta||sg(z_q)-E(x)||^2_2 \\
&amp;amp;L_{GAN}=\log{D(x)}+\log{(1-D(\hat{x}))} \\
&amp;amp;\arg{\min_{E,G,Z}\max_{D}}\ \mathbb{E}\lbrack L_{VQ}(E,G,Z)+\lambda L_{GAN}(E,G,Z,D)\rbrack
\end{align}
$$&lt;/p&gt;
&lt;p&gt;where the adaptive weight $\lambda=\nabla_{G_L}[L_{rec}]/(\nabla_{G_L}[L_{GAN}]+10^{âˆ’6})$ tends to focus on the smaller one of $L_{rec}$ and $L_{GAN}$.&lt;/p&gt;
&lt;h3 id=&#34;12-autoregression&#34; class=&#34;icon-inline&#34; id=&#34;12-autoregression&#34;&gt;1.2 Autoregression&lt;a class=&#34;icon-link&#34; href=&#34;#12-autoregression&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For the autoregressive transformer, it can be implemented by the &amp;ldquo;decoder-only&amp;rdquo; structure and the casual self-attention mask. And we can directly maximize the log-likelihood of the data representations as:&lt;/p&gt;
&lt;p&gt;$$
L_{Transformer} = \mathbb{E}[-\log(\Pi_i{p(s_i|s_{&amp;lt;i})})]
$$&lt;/p&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231026184452.png&#34; loading=&#34;lazy&#34;&gt;
&lt;figcaption&gt;
Sliding attention window&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;When generating images in the megapixel regime (&amp;gt;256^2), that transformer will adopt the local attention in a sliding-window manner for efficiency. Since transformer is a kind of network without inductive bias, we need the spatial conditioning information or the training dataset with spatial invariance to ensure such local strategy work well.&lt;/p&gt;
&lt;h2 id=&#34;parti&#34; class=&#34;icon-inline&#34; id=&#34;parti&#34;&gt;Parti&lt;a class=&#34;icon-link&#34; href=&#34;#parti&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://arxiv.org/abs/2206.10789&#34;&gt;-&amp;gt; Jiahui Yu, et al. arXiv 2022&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Parti (Pathways Autoregressive Text-to-Image) shows that above two-stage autoregressive method is able to realize high-fidelity generation for text-to-image with additional fine-tuning and upsampling.&lt;/p&gt;
&lt;h3 id=&#34;21-vit-vqgan&#34; class=&#34;icon-inline&#34; id=&#34;21-vit-vqgan&#34;&gt;2.1 ViT-VQGAN&lt;a class=&#34;icon-link&#34; href=&#34;#21-vit-vqgan&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;They first train a stronger &lt;a href=&#34;https://arxiv.org/abs/2110.04627&#34;&gt;ViT-VQGAN-Small&lt;/a&gt; encoder (30M) as a image tokenizer on their training data, which achieves 4x downsampling (i.e., $256\to 32$) and learns 8192 image token classes for the codebook.&lt;/p&gt;
&lt;h3 id=&#34;22-text-to-image&#34; class=&#34;icon-inline&#34; id=&#34;22-text-to-image&#34;&gt;2.2 Text-to-Image&lt;a class=&#34;icon-link&#34; href=&#34;#22-text-to-image&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231027113357.png&#34; loading=&#34;lazy&#34; width=&#34;600&#34;&gt;
&lt;figcaption&gt;
Summary of Parti&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The text-to-image model is based on a classical encoder-decoder architecture in multi-modal tasks.
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231027131920.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;They build a &lt;a href=&#34;https://arxiv.org/abs/1808.06226&#34;&gt;SentencePiece model&lt;/a&gt; as the text encoder which provides text tokens of length 128. This text encoder is first &lt;strong&gt;pretrain on two datasets&lt;/strong&gt;: the C4 datasets with BERT loss, and their image-text datasets with contrastive loss.&lt;/p&gt;
&lt;p&gt;After pretraining, they continue &lt;strong&gt;training both encoder and decoder&lt;/strong&gt; for text-to-image generation with softmax cross-entropy loss. Nothing that the decoder uses conv-shaped masked sparse attention (like the sliding window in Taming Transformer).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The ability of text encoder after pretraining performs comparably to BERT, but degrades after the full encoder-decoder training, which indicates the difference between language representation and image-grounded language representation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Classifier-free guidance&lt;/strong&gt; has been adopted to great effect for Parti. During inference, tokens are sampled from a linear combination of logits sampled from an unconditional model and a conditional model on a text prompt.&lt;/p&gt;
&lt;h3 id=&#34;23-fine-tune--super-resolution&#34; class=&#34;icon-inline&#34; id=&#34;23-fine-tune--super-resolution&#34;&gt;2.3 Fine-tune &amp;amp; Super-Resolution&lt;a class=&#34;icon-link&#34; href=&#34;#23-fine-tune--super-resolution&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After two-stage training, they freeze the image tokenizer and codebook, and fine-tune a larger-size image detokenizer (600M) to further improve visual acuity.&lt;/p&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231027113410.png&#34; loading=&#34;lazy&#34;&gt;
&lt;figcaption&gt;
A learned super-resolution module to upsample images&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Moreover, they employ a simple super-resolution network (15M~30M) on top of the image detokenizer. This SR-network is based on &lt;a href=&#34;https://arxiv.org/abs/1808.08718&#34;&gt;WDSR&lt;/a&gt; and trained with the same losses of &lt;a href=&#34;https://arxiv.org/abs/2110.04627&#34;&gt;ViT-VQGAN&lt;/a&gt; (perceptual loss, StyleGAN loss and l2 loss). It has about 15M parameters for 2x upsampling and 30M parameters for 4x upsampling.&lt;/p&gt;
&lt;h2 id=&#34;muse&#34; class=&#34;icon-inline&#34; id=&#34;muse&#34;&gt;Muse&lt;a class=&#34;icon-link&#34; href=&#34;#muse&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2301.00704&#34;&gt;-&amp;gt; Huiwen Chang, et al. arXiv 2023&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Although above solutions alleviate high training cost to some extent, the autoregressive paradigm still slows down inference significantly. Can we adopt parallel iteration instead of one by one? Muse give that answer which employs a &lt;strong&gt;random masking strategy&lt;/strong&gt; (like MLM in NLP) to facilitate predicting multiple tokens at once.&lt;/p&gt;
&lt;h3 id=&#34;31-frozen-llm-as-text-encoder&#34; class=&#34;icon-inline&#34; id=&#34;31-frozen-llm-as-text-encoder&#34;&gt;3.1 Frozen LLM as Text Encoder&lt;a class=&#34;icon-link&#34; href=&#34;#31-frozen-llm-as-text-encoder&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Recent works show that the conceptual representations learned by LLMs are roughly linearly mappable to those learned by models trained on vision tasks. Fueled by these observations, Muse adopts frozen &lt;a href=&#34;https://dl.acm.org/doi/abs/10.5555/3455716.3455856&#34;&gt;T5-XXL&lt;/a&gt; as the text encoder and tries to map those rich visual and semantic concepts in the LLM embeddings to the generated images. These embedding vectors are linearly projected to the hidden size of later Transformer models (base and super-res).&lt;/p&gt;
&lt;h3 id=&#34;32-base-model&#34; class=&#34;icon-inline&#34; id=&#34;32-base-model&#34;&gt;3.2 Base Model&lt;a class=&#34;icon-link&#34; href=&#34;#32-base-model&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231027142154.png&#34; loading=&#34;lazy&#34;&gt;
&lt;figcaption&gt;
The base model of Muse&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Muse&amp;rsquo;s base model has the same encoder-decoder architecture as Parti, but it employs a random masking strategy to ensure learning more expressive and robust.&lt;/p&gt;
&lt;p&gt;They leave all the text embeddings unmasked and randomly mask a varying fraction of image tokens and replace them with a special [MASK] token. The masking rate is a variable based on a cosine scheduling $r\sim p(r)=\frac{2}{\pi} (1 âˆ’ r^2)^{-1/2}$, where the bias towards higher masking rates makes the prediction problem harder.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Noting that this masking functions on input rather than attention layers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this way, the base model is trained to predict all masked tokens at once.&lt;/p&gt;
&lt;h3 id=&#34;33-super-resolution-model&#34; class=&#34;icon-inline&#34; id=&#34;33-super-resolution-model&#34;&gt;3.3 Super-Resolution Model&lt;a class=&#34;icon-link&#34; href=&#34;#33-super-resolution-model&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231027142223.png&#34; loading=&#34;lazy&#34;&gt;
&lt;figcaption&gt;
The super-resolution model of Muse&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;For the high-resolution generation, the authors found that directly predicting $512\times 512$ resolution leads the model to focus on low-level details over large-scale semantics. To this end, they trained another decoder to predict masked tokens in higher resolution with the help of low-res conditioning and text conditioning.&lt;/p&gt;
&lt;h3 id=&#34;34-fine-tune&#34; class=&#34;icon-inline&#34; id=&#34;34-fine-tune&#34;&gt;3.4 Fine-tune&lt;a class=&#34;icon-link&#34; href=&#34;#34-fine-tune&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Following the Parti model, Muse increases the capacity of the VQGAN decoder by the addition of more residual layers and channels, and then fine-tune the new decoder layers while other modules frozen.&lt;/p&gt;
&lt;h3 id=&#34;35-iterative-parallel-decoding&#34; class=&#34;icon-inline&#34; id=&#34;35-iterative-parallel-decoding&#34;&gt;3.5 Iterative Parallel Decoding&lt;a class=&#34;icon-link&#34; href=&#34;#35-iterative-parallel-decoding&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231027153559.png&#34; loading=&#34;lazy&#34; width=&#34;500&#34;&gt;
&lt;figcaption&gt;
Inference samples in Muse&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The above masked learning support us to decode multiple tokens at each step, so this inference is called as iterative parallel decoding. Based on a cosine schedule, we predict all masked tokens at each step, and choose a fraction of the highest confidence tokens as unmasked, and continue next step to predict remaining masked tokens.&lt;/p&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231027155432.png&#34; loading=&#34;lazy&#34; width=&#34;500&#34;&gt;
&lt;figcaption&gt;
Per-batch inference time for several models.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Using this procedure, Muse is able to perform high-fidelity inference using only 24 steps in base model and 8 steps in super-resolution model, and is significantly faster than competing diffusion or other autoregressive models.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Learning the Multi-modal Feature Space</title>
      <link>https://yuhaoo00.github.io/posts/snapshots/2309clip/</link>
      <pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://yuhaoo00.github.io/posts/snapshots/2309clip/</guid>
      <description>&lt;p&gt;In multi-modal tasks, one of the key challenges is the alignment between feature spaces of different modals. CLIP is representative of this type of work. Although its motivation is to learn a transferable visual model (like BERT) for downstream vision tasks, CLIP has brought a lot of inspirations for multi-modal tasks. Therefore, I prefer to describe CLIP and variants as &lt;strong&gt;how to learn a better multi-modal feature space&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;clip&#34; class=&#34;icon-inline&#34; id=&#34;clip&#34;&gt;CLIP&lt;a class=&#34;icon-link&#34; href=&#34;#clip&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://proceedings.mlr.press/v139/radford21a.html&#34;&gt;-&amp;gt; Alec Radford, et al. NeuraIPS 2021&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231023154456.png&#34; loading=&#34;lazy&#34; width=&#34;600&#34;&gt;
&lt;figcaption&gt;
The model architecture of CLIP (source from paper)&lt;/figcaption&gt;
&lt;/figure&gt;

CLIP has a quite simple design which consists of a &lt;strong&gt;joint-training&lt;/strong&gt; image encoder and text encoder, but there are still some interesting details worth noting.&lt;/p&gt;
&lt;h3 id=&#34;11-bag-of-words-encoding&#34; class=&#34;icon-inline&#34; id=&#34;11-bag-of-words-encoding&#34;&gt;1.1 Bag-of-words encoding&lt;a class=&#34;icon-link&#34; href=&#34;#11-bag-of-words-encoding&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the text encoder, the output at last [EOS] token are used as the feature representation of the text (i.e. $[N,L]\to[N,L,D]\to[N,D]$).  The authors refer to this process as &amp;ldquo;Bag-of-words Encoding&amp;rdquo; where the text of arbitrary length can be encoded into a D-dimensional vector.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In Stable Diffusion, CLIP&amp;rsquo;s text encoder is used to provide crucial text feature. People often take full-sequence features (skip last 1 or 2 layers) from CLIP&amp;rsquo;s text encoder into the cross-attention to realize a &amp;ldquo;word-by-word instruction&amp;rdquo;. But indeed, if you take only the feature at last [EOS] token as the instruction, the results will be fine due to its globality.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;12-contrastive-learning&#34; class=&#34;icon-inline&#34; id=&#34;12-contrastive-learning&#34;&gt;1.2 Contrastive learning&lt;a class=&#34;icon-link&#34; href=&#34;#12-contrastive-learning&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The contrastive learning is implemented by optimizing a symmetric cross entropy loss over the cosine similarity score. We say that an image-text pair is matched if the cosine similarity between their embeddings is high enough.&lt;/p&gt;
&lt;p&gt;In this paper, they set a learnable temperature parameter $e^t$ to scale the similarities, but didn&amp;rsquo;t explain much. I speculate such exponentiation can make learning more sensitive (imagine that steep curve) than a pure scalar.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BTW, the authors separate out l2_normalize() and refer to np.dot() as the cosine similarity, which is of course equivalent but might be confusing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;blip&#34; class=&#34;icon-inline&#34; id=&#34;blip&#34;&gt;BLIP&lt;a class=&#34;icon-link&#34; href=&#34;#blip&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://proceedings.mlr.press/v162/li22n.html&#34;&gt;-&amp;gt; Junnan Li, et al. ICML 2022&lt;/a&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231023171329.png&#34; loading=&#34;lazy&#34;&gt;
&lt;figcaption&gt;
The model architecture of BLIP (source from paper)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;In addition to the contrastive learning, BLIP introduces two more vision-language objectives: image-text matching and image-conditioned language modeling. Such multimodal mixture of encoder-decoder model is jointly trained with three objectives, enabling a wider range of downstream tasks.&lt;/p&gt;
&lt;h3 id=&#34;21-coarse-grained-alignment&#34; class=&#34;icon-inline&#34; id=&#34;21-coarse-grained-alignment&#34;&gt;2.1 Coarse-grained alignment&lt;a class=&#34;icon-link&#34; href=&#34;#21-coarse-grained-alignment&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Similar to CLIP, BLIP includes the image-text contrastive learning by two unimodal encoders. We can think of such alignment is coarse-grained, since the interaction between the features from two modalities occurs only in the last shallow linear network.&lt;/p&gt;
&lt;p&gt;A few differences from CLIP are listed below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The global feature of the whole text is allocated at the first [CLS] token instead of the [EOS].&lt;/li&gt;
&lt;li&gt;BLIP&amp;rsquo;s text encoder and image encoder is initialized from BERT-base and ViT (pre-trained on ImageNet), instead of training from scratch. (CLIP&amp;rsquo;s networks are heavily modified and scaled, so there are certainly no suitable pre-trained baselines for initialization.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22-fine-grained-alignment&#34; class=&#34;icon-inline&#34; id=&#34;22-fine-grained-alignment&#34;&gt;2.2 Fine-grained alignment&lt;a class=&#34;icon-link&#34; href=&#34;#22-fine-grained-alignment&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The image-grounded (conditioned) text encoder aims to learn image-text multimodal representation with dense cross-attention layer, which can capture the fine-grained alignment. The objective is a binary classification task to predict whether an image-text pair is matched or not.&lt;/p&gt;
&lt;p&gt;Noting that here they adopt the &lt;strong&gt;hard negative mining strategy&lt;/strong&gt;, where those negatives pairs with higher contrastive similarity in a batch will &lt;strong&gt;be more likely to be chosen&lt;/strong&gt; to compute the 0-1 loss. It makes sense because some unmatched pairs may have quite high cosine scores. Such filtering strategy is obviously another sense of fine-grained.&lt;/p&gt;
&lt;h3 id=&#34;23-language-modeling&#34; class=&#34;icon-inline&#34; id=&#34;23-language-modeling&#34;&gt;2.3 Language modeling&lt;a class=&#34;icon-link&#34; href=&#34;#23-language-modeling&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Altering to the masked self-attention can preserve the ability of language modeling with a new auxiliary objective, and is the future work as mentioned in CLIP. Now BLIP realizes this thing with the image-grounded text decoder.&lt;/p&gt;
&lt;p&gt;This decoder is inherited from the image-grounded text encoder, where bi-directional SAs are replaced with causal SAs (i.e. triangle) just like in the regular text decoder. Correspondingly, it optimizes a cross entropy loss which trains the model to maximize the likelihood of the text in an &lt;strong&gt;autoregressive manner&lt;/strong&gt;. And the text decoder share all parameters with text encoder except for the SA layers, since the remaining layers serve a similar function.&lt;/p&gt;
&lt;p&gt;Preserving the ability of LM enforce the image feature to capture all the information about the text, therefore make it easy to transfer to those vision-language generation tasks, such as Image Captioning, Visual Question Answering, and etc. But this LM objective also makes the learned feature more &amp;ldquo;text-like&amp;rdquo;, whether from the text encoder, text decoder, or even image encoder.&lt;/p&gt;
&lt;h3 id=&#34;24-dataset-bootstrapping&#34; class=&#34;icon-inline&#34; id=&#34;24-dataset-bootstrapping&#34;&gt;2.4 Dataset bootstrapping&lt;a class=&#34;icon-link&#34; href=&#34;#24-dataset-bootstrapping&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231023173348.png&#34; loading=&#34;lazy&#34;&gt;
&lt;figcaption&gt;
They introduce a captioner to produce synthetic captions for web images, and a filter to remove noisy image-text pairs. (source from paper)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;blip-2&#34; class=&#34;icon-inline&#34; id=&#34;blip-2&#34;&gt;BLIP-2&lt;a class=&#34;icon-link&#34; href=&#34;#blip-2&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://arxiv.org/abs/2301.12597&#34;&gt;-&amp;gt; Junnan Li, et al. arXiv 2023&lt;/a&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231025153821.png&#34; loading=&#34;lazy&#34;&gt;
&lt;figcaption&gt;
The model architecture of BLIP-2 (source from paper)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;BLIP-2 consists of (1) an image transformer that interacts with the frozen image encoder for visual feature extraction, (2) a text transformer that can function as both a text encoder and a text decoder. These two transformers share the same SA layers.&lt;/p&gt;
&lt;h3 id=&#34;31-learnable-queries&#34; class=&#34;icon-inline&#34; id=&#34;31-learnable-queries&#34;&gt;3.1 Learnable queries&lt;a class=&#34;icon-link&#34; href=&#34;#31-learnable-queries&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A set number of learnable queries is created as input to the image transformer. Instead of taking image patches as input, allocating learnable queries can output the smaller-length $L=32$ features independent of image resolution (since the encoder/decoder-only model outputs the same length sequence as input). The output embeddings from these queries will be forced to extract visual features that capture all the information about the text, by three objectives. Due to such query&amp;rsquo;s importance, BLIP-2&amp;rsquo;s network is also known as the &lt;strong&gt;Q-Former&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;32-shared-self-attention&#34; class=&#34;icon-inline&#34; id=&#34;32-shared-self-attention&#34;&gt;3.2 Shared self-attention&lt;a class=&#34;icon-link&#34; href=&#34;#32-shared-self-attention&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We have observed that BLIP-1&amp;rsquo;s sub-networks have many common points in architectures and even in weights. So why not merge them as possible? and how?&lt;/p&gt;
&lt;p&gt;The brilliance of BLIP-2 is that they employ different SA masking strategies for different objective to restrict the interaction between the vision token and text token, so two branches in the Q-Former can share the same SA layers.
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231025162242.png&#34; loading=&#34;lazy&#34; width=&#34;600&#34;&gt;
&lt;figcaption&gt;
The self-attention masking strategy (source from paper)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Although the masking strategies and the joint-training for three objectives sounds very straightforward and reasonable, there are a lot of unclear details waiting to be revealed in the source code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For the contrastive learning&lt;/strong&gt;, the query and text will be passed into Q-Former, respectively. Noting that the key&amp;amp;value of SA layers in the image transformer will be cached for later use.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;query_output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Qformer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bert(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            query_embeds&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;query_tokens,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            encoder_hidden_states&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;image_embeds,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            encoder_attention_mask&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;image_atts,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            use_cache&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            return_dict&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;text_output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Qformer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bert(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            text_tokens&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;input_ids,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            attention_mask&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;text_tokens&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attention_mask,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            return_dict&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;For the image-text matching&lt;/strong&gt;, the query will be concatenated with the text and passed into Q-Former. All queries and texts can attend to each other.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;output_itm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Qformer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bert(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            text_ids_all,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            query_embeds&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;query_tokens_itm,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            attention_mask&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;attention_mask_all,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            encoder_hidden_states&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;image_embeds_all,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            encoder_attention_mask&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;image_atts_all,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            return_dict&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;For the language modeling&lt;/strong&gt;, there are only the text (first token is replaced by [DEC]) as input to the Q-Former. As the visual instruction, the previous key&amp;amp;value caches (with pure visual information) will be concatenated with the current key&amp;amp;value (from the texts), and then passed to the SA layers with a multimodal causal mask.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lm_output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Qformer(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            decoder_input_ids,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            attention_mask&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;attention_mask,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            past_key_values&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;query_output&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;past_key_values,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            return_dict&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            labels&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;labels,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Compared to BLIP-1, the shared SAs of BLIP2 make the output query embeddings more &amp;ldquo;text-like&amp;rdquo; inevitably, so the image encoder should be frozen to counteract such imbalance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;33-bootstrap-llm&#34; class=&#34;icon-inline&#34; id=&#34;33-bootstrap-llm&#34;&gt;3.3 Bootstrap LLM&lt;a class=&#34;icon-link&#34; href=&#34;#33-bootstrap-llm&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Benefit from the LM objective, the output query embedding contains rich image and text features. So them can function as soft visual prompts to LLM by a simple linear projection.&lt;/p&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231025213420.png&#34; loading=&#34;lazy&#34;&gt;
&lt;figcaption&gt;
(Top) Bootstrapping a decoder-based LLM. (Bottom) Bootstrapping an encoder-decoder-based LLM (source from paper)&lt;/figcaption&gt;
&lt;/figure&gt;

</description>
    </item>
    <item>
      <title>Controllable Text-To-Image Diffusion Models â€”â€” Explicit Control</title>
      <link>https://yuhaoo00.github.io/posts/snapshots/2308controlgenerationa/</link>
      <pubDate>Thu, 17 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://yuhaoo00.github.io/posts/snapshots/2308controlgenerationa/</guid>
      <description>&lt;p&gt;Controllable Text-To-Image (T2I) generation has always been a major challenge in diffusion models. On the one hand, people hope that the generated images can follow some predefined physical attributes, such as the number, position, size, and texture of objects. On the other hand, they also require the T2I models to retain a certain level of creativity.&lt;/p&gt;
&lt;p&gt;At present, there are quite a lot of researches related to controllable T2I generation. I prefer to divide them into two categories: one primarily focuses on correcting the generation path in inference, called Explicit Control; the other one strengthens the network through fine-tuning or adding new layers, called Implicit Control.&lt;/p&gt;
&lt;p&gt;This blog, as the first part of this series, will summarize representative researches related to Explicit Control, which can be further divided into two technical routes: forward guidance and backward guidance. The discussion of implicit control will be updated in another blog post.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS: This explicit or implicit statement comes from my personal preference and is not yet widely accepted in the academic community.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;early-explorations-before-the-stable-diffusion&#34; class=&#34;icon-inline&#34; id=&#34;early-explorations-before-the-stable-diffusion&#34;&gt;Early Explorations before the Stable Diffusion&lt;a class=&#34;icon-link&#34; href=&#34;#early-explorations-before-the-stable-diffusion&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;image-to-image--inpainting&#34; class=&#34;icon-inline&#34; id=&#34;image-to-image--inpainting&#34;&gt;Image-to-Image &amp;amp; Inpainting&lt;a class=&#34;icon-link&#34; href=&#34;#image-to-image--inpainting&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://arxiv.org/abs/2108.01073&#34;&gt;-&amp;gt; Chenlin Meng, et al. arXiv 2021&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://openaccess.thecvf.com/content/CVPR2022/html/Lugmayr_RePaint_Inpainting_Using_Denoising_Diffusion_Probabilistic_Models_CVPR_2022_paper.html&#34;&gt;-&amp;gt; Andreas Lugmayr, et al. CVPR 2022&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The idea of explicit control can date back to before the Stable Diffusion, with two classic examples being SDEdit (Image-to-Image) and RePaint (Inpainting). Due to their relatively simple principles,  here we just briefly summarize them:&lt;/p&gt;
&lt;p&gt;SDEdit uses a noisy version of a reference image as the starting point for the denoising process, ensuring that the generated image maintains a similar color layout to the reference image. Repaint, during the denoising process, combines the masked background image with the predicted foreground image to realize inpainting new content in the masked regions.&lt;/p&gt;
&lt;p&gt;Both of these classic methods achieve controllable generation through modify denoising process (without any training), demonstrating the strong robustness of the diffusion model and the significant potential for modifying the denoising process manually!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the &lt;strong&gt;Diffusers&lt;/strong&gt; library, the &lt;em&gt;StableDiffusionInpaintPipeline&lt;/em&gt; has two versions. The unfinetuned version is based on the idea of Repaint without training, while the finetuned version involves concatenating the &lt;em&gt;Mask&lt;/em&gt; and &lt;em&gt;Masked_image_latents&lt;/em&gt; as additional 5 channels to the input of Unet and fine-tuning all layers. The latter version achieves better results.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;blended-diffusion&#34; class=&#34;icon-inline&#34; id=&#34;blended-diffusion&#34;&gt;Blended Diffusion&lt;a class=&#34;icon-link&#34; href=&#34;#blended-diffusion&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://openaccess.thecvf.com/content/CVPR2022/html/Avrahami_Blended_Diffusion_for_Text-Driven_Editing_of_Natural_Images_CVPR_2022_paper.html&#34;&gt;-&amp;gt; Omri Avrahami, et al. CVPR 2022&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/DFD12FE9-4E0D-436D-8767-86E51992E1B6_1_201_a.jpeg&#34; loading=&#34;lazy&#34; width=&#34;500&#34;&gt;
&lt;figcaption&gt;
A simple diagram of the Blended Diffusion&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;With the introduction of CLIP technology, Blended Diffusion achieves text-driven inpainting. The basic approach can be summarized as above figure. In each iteration,  $\hat{x_0}$ is predicted based on the inverse equation of the known $p(x_t|x_0)$, and is masked accordingly. Then, the masked image and the text prompt are jointly input into CLIP to obtain a cosine similarity score $\mathcal{L}$ (with the trick of data augmentation to improve sensitivity). The gradient of this score is used to update the latent $\epsilon(x_t)+\nabla_{\hat{x_0}}\mathcal{L}$. Moreover, the foreground and background images are fused based on the given mask to update the latent $x_{t-1}$ for next iteration.&lt;/p&gt;
&lt;p&gt;This approach is essentially a combination of CLIP-based T2I and Repaint method. In fact, the CLIP-based generation is a kind of classifier-based guidance, where the iteration values are updated based on the gradient of a certain criterion. Although this gradient-based approach may sound a little old-school in the days of Classifier-Free Guidance (CFG), we can still see its effectiveness in serval cutting-edge studies later on.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;forward-guidance&#34; class=&#34;icon-inline&#34; id=&#34;forward-guidance&#34;&gt;Forward Guidance&lt;a class=&#34;icon-link&#34; href=&#34;#forward-guidance&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;prompt-to-prompt-image-editing-with-cross-attention&#34; class=&#34;icon-inline&#34; id=&#34;prompt-to-prompt-image-editing-with-cross-attention&#34;&gt;Prompt-to-Prompt Image Editing with Cross Attention&lt;a class=&#34;icon-link&#34; href=&#34;#prompt-to-prompt-image-editing-with-cross-attention&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://arxiv.org/abs/2208.01626&#34;&gt;-&amp;gt; Amir Hertz, et al. arXiv 2022&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Prompt-to-Prompt (P2P) focuses on editing already generated images, which may not be relevant to controllable generation, but it shows great potential of manipulating Cross Attention (CA) maps and brings quite a lot of inspiration to controllable generation techniques!&lt;/p&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231106181510.png&#34; loading=&#34;lazy&#34;&gt;
&lt;figcaption&gt;
Cross-Attention visualization in Unet (from the paper)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;As shown above, P2P first found that CA corresponding to text tokens had strong semantic information (even in the early stages of generation). This finding seems obvious when you realize that CA is the similarity between image features and text features. But no one had visualized them before, and such strong semantic connections were not well known!&lt;/p&gt;
&lt;p&gt;At the same time, this observation also reveals how the CA mechanism drives T2I generation. Let&amp;rsquo;s imagine the data flow: the sequence of text features from CLIP is first mapped to base values, then fused at different locations based on attention weights (the similarity between images and texts), and finally makes up the image we see (magical multimodal learning)!&lt;/p&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231107163401.png&#34; loading=&#34;lazy&#34;&gt;
&lt;figcaption&gt;
Image editing effect achieved by P2P (from the paper)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;More excitingly, the authors successfully controlled generation by manipulating CA values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Replacing the CA corresponding to a text token for content replacement.&lt;/li&gt;
&lt;li&gt;Deleting the CA corresponding to a text token for content erasure.&lt;/li&gt;
&lt;li&gt;Adding the CA corresponding to a text token for content addition.&lt;/li&gt;
&lt;li&gt;Weighting the CA corresponding to a text token to effectively enhance or weaken content.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Now we can enhance or weaken the content by weighting the text features from CLIP directly. This &lt;strong&gt;&amp;ldquo;weighted prompt&amp;rdquo;&lt;/strong&gt; trick is widely integrated into various T2I tools (such as compel, A1111-webui, Midjourney, etc.).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;compositional-visual-generation-with-composable-diffusion-models&#34; class=&#34;icon-inline&#34; id=&#34;compositional-visual-generation-with-composable-diffusion-models&#34;&gt;Compositional Visual Generation with Composable Diffusion Models&lt;a class=&#34;icon-link&#34; href=&#34;#compositional-visual-generation-with-composable-diffusion-models&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://arxiv.org/abs/2206.01714&#34;&gt;-&amp;gt; Nan Liu, et al. ECCV 2022&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/9F007937-5B9C-4D33-A13E-DEC5BC7F7683_1_201_a.jpeg&#34; loading=&#34;lazy&#34; width=&#34;500&#34;&gt;
&lt;figcaption&gt;
A simple diagram of the Composed Diffusion&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Composed Diffusion supports the generation of more content or objects. Although this paper is inspired by composing multiple EBMs, this idea is equivalent to the advanced CFG formally. In short, multiple text prompts separated by the &amp;ldquo;AND&amp;rdquo; symbol are fed into the diffusion model separately and then weighted to produce the results:&lt;/p&gt;
&lt;p&gt;$$
\hat{\epsilon}(x_t,t)=\epsilon(x_t,t)+\sum_{i=1}^{n}w_i(\epsilon(x_t,t|c_i)-\epsilon(x_t,t))
$$&lt;/p&gt;
&lt;p&gt;This synthesis is a bit crude and often less than expected, because different content will merge globally without explicit location constraints. Therefore, Composed Diffusion is more suitable for those multi-content with large spatial differences to avoid unexpected conflicts.&lt;/p&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231106202519.png&#34; loading=&#34;lazy&#34; width=&#34;500&#34;&gt;
&lt;figcaption&gt;
Composing effect achieved by Composed Diffusion (from the paper)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;multidiffusion-fusing-diffusion-paths-for-controlled-image-generation&#34; class=&#34;icon-inline&#34; id=&#34;multidiffusion-fusing-diffusion-paths-for-controlled-image-generation&#34;&gt;MultiDiffusion: Fusing Diffusion Paths for Controlled Image Generation&lt;a class=&#34;icon-link&#34; href=&#34;#multidiffusion-fusing-diffusion-paths-for-controlled-image-generation&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://arxiv.org/abs/2302.08113&#34;&gt;-&amp;gt; Omer Bar-Tal, et al. arXiv 2023&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/0172B6F3-2F6E-49E8-82EF-07F6EB37DEF0_1_201_a.jpeg&#34; loading=&#34;lazy&#34; width=&#34;500&#34;&gt;
&lt;figcaption&gt;
A simple diagram of the MultiDiffusion&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;If we want more control over spatial position, the most direct way is to draw something in a certain region by specifying a target mask or box. While this sounds like a multi-region inpainting task, the question is how to ensure that they are independent and harmonious with each other?&lt;/p&gt;
&lt;p&gt;MultiDiffusion gives the answer. The authors first build a mathematical optimization model for harmonious multi-region generation and derive a closed-form solution:&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
\Psi\left(J_t \mid z\right)=\arg\min_{J\in\mathcal{J}}\sum_{i=1}^n\left|W_i \otimes\left[F_i(J)-\Phi\left(I_t^i \mid y_i\right)\right]\right|^2 \\
\Psi\left(J_t \mid z\right)=\sum_{i=1}^n \frac{F_i^{-1}\left(W_i\right)}{\sum_{j=1}^n F_j^{-1}\left(W_j\right)} \otimes F_i^{-1}\left(\Phi\left(I_t^i \mid y_i\right)\right)
\end{align}
$$&lt;/p&gt;
&lt;p&gt;In fact, MultiDiffusion can be understood as a multi-region extension of Repaint. It fuses multiple images generated from different regions (depending on the degree of overlap) in each step, and then eliminates dissonance at the boundaries solely by the robustness of the denoising process. Obviously, due to the lack of interaction between the central features of different regions, the final generated image has obvious style variations across regions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The derived fusion equation is intuitive and can be obtained even without establishing the optimization problem. But it does make the whole paper more academic&amp;hellip; -_-&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;training-free-structured-diffusion-guidance-for-compositional-text-to-image-synthesis&#34; class=&#34;icon-inline&#34; id=&#34;training-free-structured-diffusion-guidance-for-compositional-text-to-image-synthesis&#34;&gt;Training-Free Structured Diffusion Guidance for Compositional Text-to-Image Synthesis&lt;a class=&#34;icon-link&#34; href=&#34;#training-free-structured-diffusion-guidance-for-compositional-text-to-image-synthesis&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://arxiv.org/abs/2212.05032&#34;&gt;-&amp;gt; Weixi Feng, et al. ICLR 2023&lt;/a&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/C5A36A3D-3958-4026-B90B-791D289DE33C_1_201_a.jpeg&#34; loading=&#34;lazy&#34; width=&#34;500&#34;&gt;
&lt;figcaption&gt;
A simple diagram of the Structured Diffusion&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Similar to the goal of Composed Diffusion, Structured Diffusion seeks to synthesize more content through text input alone. The approach derives from two key observations: first, the Cross-Attention of the input text token is very semantic (also observed by P2P); Second, CLIP&amp;rsquo;s text encoder (based on Transformer) will inevitably incorporate contextual information for each token.&lt;/p&gt;
&lt;p&gt;Therefore, Structured Diffusion attempts to ensure that specific text is not affected by context so that the corresponding content is properly synthesized. They first strip all the noun phrases from a sentence using a parser like Constituency Tree or Scene Graph; Then input these noun phrases into the CLIP text encoder separately to avoid mutual influence; And fill in the rest with the features of the whole sentence $W_p$; Finally, in the Unet, these new text features $W_i$ will be mapped into new values $V_i$, and fused according to the old CA $M^t$:&lt;/p&gt;
&lt;p&gt;$$
O^t=\frac{1}{n}\sum_{i=1}^{n}(M^tV_i)
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that attention is still computed from the original whole-sentence query, which contribute to the spatial layout allocation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thus, we enhance the features of all noun phrases and reduce their interference with each other. Unfortunately, the actual improvement from this approach is not obvious.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;backward-guidance&#34; class=&#34;icon-inline&#34; id=&#34;backward-guidance&#34;&gt;Backward Guidance&lt;a class=&#34;icon-link&#34; href=&#34;#backward-guidance&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;training-free-layout-control-with-cross-attention-guidance&#34; class=&#34;icon-inline&#34; id=&#34;training-free-layout-control-with-cross-attention-guidance&#34;&gt;Training-Free Layout Control with Cross-Attention Guidance&lt;a class=&#34;icon-link&#34; href=&#34;#training-free-layout-control-with-cross-attention-guidance&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://arxiv.org/abs/2304.03373&#34;&gt;-&amp;gt; Minghao Chen, et al. arXiv 2023&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This paper attempts to implement control generation for multiple regions with a single diffusion model, called layout control. Interestingly, the authors explore two different methods of guidance: 1. a region constraint imposed in the generation iteration, also known as forward guidance; 2. a gradient-based update idea similar to Blended Diffusion, also known as backward guidance.&lt;/p&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/98AB3A71-A285-471A-A6AD-ADF1A157F1AF_1_201_a.jpeg&#34; loading=&#34;lazy&#34; width=&#34;500&#34;&gt;
&lt;figcaption&gt;
A simple diagram of the Layout Control&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In particular, the forward guidance will modify the Cross-Attention of the specified text tokens (in each layer) to cluster them into the specified box:&lt;/p&gt;
&lt;p&gt;$$
\hat{A_{p,i}}=(1-\lambda)A_{p,i}+\lambda g_p\sum_{j}A_{j,i}
$$&lt;/p&gt;
&lt;p&gt;Where $p$ is the position coordinate, $i$ is the index of the text token, $g_p$ is the gaussian weight in a specified box (sum of 1), and $\sum_{j}A_{j,i}$ is the sum of the entire CA Map. It means that the latter term in the equation will redistribute the attention weights according to the gaussian box.&lt;/p&gt;
&lt;p&gt;Backward guidance defines a function to measure the CA concentration of a given token over a given box $B$:&lt;/p&gt;
&lt;p&gt;$$
E(A,B,i)=\left(1-\frac{\sum_{p\in B}A_{p,i}}{\sum_{p}A_{p,i}}\right)^2
$$&lt;/p&gt;
&lt;p&gt;We update the latent $x_t$ at the current time step with the gradient of this metric as shown in the figure.&lt;/p&gt;
&lt;p&gt;According to the experimental results, the backward guidance is more effective (and of course consumes more running time). In addition, the author also integrates this method with Dreambooth and Text Inversion, which still achieve a good control effect.&lt;/p&gt;
&lt;h3 id=&#34;attend-and-excite-attention-based-semantic-guidance-for-text-to-image-diffusion-models&#34; class=&#34;icon-inline&#34; id=&#34;attend-and-excite-attention-based-semantic-guidance-for-text-to-image-diffusion-models&#34;&gt;Attend-and-Excite: Attention-Based Semantic Guidance for Text-to-Image Diffusion Models&lt;a class=&#34;icon-link&#34; href=&#34;#attend-and-excite-attention-based-semantic-guidance-for-text-to-image-diffusion-models&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://doi.org/10.1145/3592116&#34;&gt;-&amp;gt; Hila Chefer et al. ACM Trans. Graph. 2023&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Similar to the observations in P2P, this paper assumes that if something is not generated as expected, the corresponding Cross-Attention should be increased. The difference, however, is that Attend-and-Excite establishes a certain metric as a loss function and backpropagates the gradient to excite the update of latents, rather than forcing up the corresponding value by direct re-weighting.&lt;/p&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/90C7799C-B173-4CF9-B8FA-07BB9958EEA6_1_201_a.jpeg&#34; loading=&#34;lazy&#34; width=&#34;500&#34;&gt;
&lt;figcaption&gt;
Attend-and-Excite&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Specifically, we first need to select a few text tokens as the target to be enhanced (for example, the 2nd and 5th), calculate their corresponding average cross-attention ($A_t^2,A_t^5$), and then take the smallest peak of them as the loss:&lt;/p&gt;
&lt;p&gt;$$
Loss=max\left(1-max(A_t^2),1-max(A_t^5)\right)
$$&lt;/p&gt;
&lt;p&gt;Finally, the latent is updated according to the gradient as $x_t^{\prime}=x_t-\alpha \nabla_{x_t} Loss$, which encourages the peak cross-attention of all selected text tokens to be as high as possible. Of course, there are several limitations of Attend-and-Excite as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Manually selecting&lt;/strong&gt; the index of the enhanced token is not a convenient and perfect solution.&lt;/li&gt;
&lt;li&gt;If and only the excitation in &lt;strong&gt;the middle scale of Unet&lt;/strong&gt; is effective. Because not all scales of cross-attention have semantic information and contribute semantically to the final generation.&lt;/li&gt;
&lt;li&gt;This involves &lt;strong&gt;too many hyperparameter settings&lt;/strong&gt;, such as artificial thresholds that determine the number of backward updates during early iterations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dragdiffusion-harnessing-diffusion-models-for-interactive-point-based-image-editing&#34; class=&#34;icon-inline&#34; id=&#34;dragdiffusion-harnessing-diffusion-models-for-interactive-point-based-image-editing&#34;&gt;DragDiffusion: Harnessing Diffusion Models for Interactive Point-based Image Editing&lt;a class=&#34;icon-link&#34; href=&#34;#dragdiffusion-harnessing-diffusion-models-for-interactive-point-based-image-editing&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://arxiv.org/abs/2306.14435&#34;&gt;-&amp;gt; Yujun Shi, et al. arXiv 2023&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DragDiffusion is a direct extension of the famous DragGAN. Similarly, DragDiffusion can achieve image editing by dragging multiple points, and the principle behind it is the backward guidance for the generated path by gradient-based update.&lt;/p&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/42F9A785-50FF-4340-8262-2EE338776B96_1_201_a.jpeg&#34; loading=&#34;lazy&#34; width=&#34;500&#34;&gt;
&lt;figcaption&gt;
Attend-and-Excite&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;As shown above, in addition to the regular diffusion denoising, the generated path in DragDiffusion contains two other mappings: Motion Supervision and Point Tracking. The loss function of Motion Supervision is shown as follows:&lt;/p&gt;
&lt;p&gt;$$
\mathcal{L}\left(z_t^k\right)= \sum_{i=1}^n \sum_{q \in \Omega\left(h_i^k, r_1\right)}\lVert F_{q+d_i}\left(z_t^k\right)-\operatorname{sg}\left(F_q\left(z_t^k\right)\right) \rVert_1  +\lambda \lVert \left(z_{t-1}^k-\operatorname{sg}\left(z_{t-1}^0\right)\right) \odot(1-M) \rVert_1
$$&lt;/p&gt;
&lt;p&gt;In simple terms, the former of this loss encourages feature movement at the patch level $F_{\Omega+d_i}(z_t^k) \gets F_{\Omega}(z_t^k)$, while the latter keeps the pixel values outside the mask nearly constant $(1-M)z_t^k \approx (1-M)z_t^{k+1}$.&lt;/p&gt;
&lt;p&gt;Here $sg(\cdot)$ is the stop gradient operator, which makes the pixel values $F_{\Omega}(z_t^k)$ in the original patch are not affected by gradient descent directly. We can calculate the gradient and update the latent as follows:&lt;/p&gt;
&lt;p&gt;$$
z_t^{k+1}=z_t^k-\eta \cdot \nabla_{z_t^k} \mathcal{L}
$$&lt;/p&gt;
&lt;p&gt;Point Tracking is used to rematch the location of the handle points, which is implemented directly using a nearest neighbor search:&lt;/p&gt;
&lt;p&gt;$$
h_i^{k+1}=\underset{q \in \Omega\left(h_i^k, r_2\right)}{\arg \min }\left|F_q\left(z_t^{k+1}\right)-F_{h_i^k}\left(z_t\right)\right|_1
$$&lt;/p&gt;
&lt;p&gt;Although this method directly follows DragGAN&amp;rsquo;s idea, the non-stationary iterative process of the Diffusion Models makes many hyperparameter different, and the author also abandons CFG to avoid large numerical errors.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Two Inpainting Pipelines in Diffusers</title>
      <link>https://yuhaoo00.github.io/posts/analysis/2307inpaintpipeline/</link>
      <pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://yuhaoo00.github.io/posts/analysis/2307inpaintpipeline/</guid>
      <description>&lt;h2 id=&#34;guided-generation&#34; class=&#34;icon-inline&#34; id=&#34;guided-generation&#34;&gt;Guided Generation&lt;a class=&#34;icon-link&#34; href=&#34;#guided-generation&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&#34;hybrid-condition-by-fine-tuning&#34; class=&#34;icon-inline&#34; id=&#34;hybrid-condition-by-fine-tuning&#34;&gt;Hybrid-condition by Fine-Tuning&lt;a class=&#34;icon-link&#34; href=&#34;#hybrid-condition-by-fine-tuning&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
</description>
    </item>
    <item>
      <title>Network Design in Stable Diffusion</title>
      <link>https://yuhaoo00.github.io/posts/analysis/2306sdnetwork/</link>
      <pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://yuhaoo00.github.io/posts/analysis/2306sdnetwork/</guid>
      <description>&lt;p&gt;StabilityAI has recently open sourced a series of foundational models for image generation, called Stable Diffusion. Although we know these models are based on &lt;a href=&#34;https://openaccess.thecvf.com/content/CVPR2022/html/Rombach_High-Resolution_Image_Synthesis_With_Latent_Diffusion_Models_CVPR_2022_paper.html&#34;&gt;latent diffusion&lt;/a&gt;, there are few reports mention their detailed designs. To facilitate better understanding and potential future improvement, this blog provide some information about the designs of Unet and VAE, which are key components of the magic generation.&lt;/p&gt;
&lt;h2 id=&#34;unet&#34; class=&#34;icon-inline&#34; id=&#34;unet&#34;&gt;Unet&lt;a class=&#34;icon-link&#34; href=&#34;#unet&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/4320ED37-C913-487C-AF89-3563E40F5828_1_201_a.jpeg&#34; loading=&#34;lazy&#34;&gt;
&lt;figcaption&gt;
Fig. 1: Overall of the Unet in Stable Diffusion 1.x &amp;amp; 2.x&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;As in Fig.1, this Unet is consist of alternating convolution layers and transformer layers, which is the modern design to provide stronger representation than pure-conv or pure-transformer in the vision field. In SD1.x &amp;amp; SD2.x, $l_1=l_2=l_3=l_4=2$.&lt;/p&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/B431465F-81A1-404F-9AA0-1474625D7B44_1_201_a.jpeg&#34; loading=&#34;lazy&#34; width=&#34;600&#34;&gt;
&lt;figcaption&gt;
Fig. 2: Skip-connection in the 2nd scale.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The skip-connection of this Unet is very dense, where the output from each transformer in encoder (downsample side) will be transmitted and concatenated with the corresponding decoder layer&amp;rsquo;s input as in Fig. 2.&lt;/p&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/A012E8AE-8131-4160-8158-03EEC2A01A61_1_201_a.jpeg&#34; loading=&#34;lazy&#34; width=&#34;500&#34;&gt;
&lt;figcaption&gt;
Fig 3: Transformer&amp;rsquo;s Design&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In the cross-attention, it is worth noting that the feature from extra condition is regarded as key $K$ and value $V$, and the feature from latent is regarded as query $Q$. This setting follows the classical decoder design in the autoregressive language transformer. At the same time, it is reasonable to use rich information as the base to generate.&lt;/p&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/BA68D415-0DF9-4CB5-B0F4-59EC7C8033E5_1_201_a.jpeg&#34; loading=&#34;lazy&#34; width=&#34;500&#34;&gt;
&lt;figcaption&gt;
Fig. 4: Resnet block&amp;rsquo;s design.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The SiLU activation has been widely utilized in this unet, it can provide better capability for nonlinear modeling.&lt;/p&gt;
&lt;p&gt;$$
\text{SiLU}(z)=z*\text{sigmoid}(z)
$$&lt;/p&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/BFE0937A-36CA-4CC4-859F-BFC0F9F3EC51_1_201_a.jpeg&#34; loading=&#34;lazy&#34; width=&#34;500&#34;&gt;
&lt;figcaption&gt;
Fig. 5: Timestep Embedding (based on positional encoding)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;vae&#34; class=&#34;icon-inline&#34; id=&#34;vae&#34;&gt;VAE&lt;a class=&#34;icon-link&#34; href=&#34;#vae&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The KL-regularized VAE is almost composed of convolutions, expect for one self-attention layer at the bottom. SD1.x and SD2.x have the same structure of VAE (the numbers of channel $c_1,c_2,c_3,c_4=128,256,512,512$), but they don&amp;rsquo;t have the same weight (SD2&amp;rsquo;s VAE might be fine-tuned for higher resolution $768\times 768$).&lt;br&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/CB9453C4-4906-4188-B99B-1186CDEDA771_1_201_a.jpeg&#34; loading=&#34;lazy&#34;&gt;
&lt;figcaption&gt;
Fig.6: VAE Encoder&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/774E90D6-50FD-4AD7-800D-D0B903C6549A_1_201_a.jpeg&#34; loading=&#34;lazy&#34;&gt;
&lt;figcaption&gt;
Fig.6: VAE Decoder&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;tiled-processing&#34; class=&#34;icon-inline&#34; id=&#34;tiled-processing&#34;&gt;Tiled Processing&lt;a class=&#34;icon-link&#34; href=&#34;#tiled-processing&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;In inference, VAE decoding often occupies a lot of memory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the tiled mode, the VAE will split the input tensor into tiles to compute encoding in several steps, feed the fully concatenated latent into U-net for denoising, spilt the result again, and finally decode these tiles by a tiled VAE decoder.&lt;/p&gt;
&lt;p&gt;This is useful to keep memory use constant regardless of image size, but the end result of tiled encoding is different from non-tiled encoding. To avoid tiling artifacts, the tiles overlap and are blended together to form a smooth output.&lt;/p&gt;
&lt;h1 id=&#34;references&#34; class=&#34;icon-inline&#34; id=&#34;references&#34;&gt;References&lt;a class=&#34;icon-link&#34; href=&#34;#references&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/huggingface/diffusers&#34;&gt;https://github.com/huggingface/diffusers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Stability-AI/stablediffusion&#34;&gt;https://github.com/Stability-AI/stablediffusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Stability-AI/generative-models&#34;&gt;https://github.com/Stability-AI/generative-models&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Inverse Problem Ã— Diffusion -- Part: B</title>
      <link>https://yuhaoo00.github.io/posts/snapshots/2212diffusionforinverseb/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://yuhaoo00.github.io/posts/snapshots/2212diffusionforinverseb/</guid>
      <description>&lt;h2 id=&#34;ddrm&#34; class=&#34;icon-inline&#34; id=&#34;ddrm&#34;&gt;DDRM&lt;a class=&#34;icon-link&#34; href=&#34;#ddrm&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://arxiv.org/abs/2201.11793&#34;&gt;-&amp;gt; Bahjat Kawar, et al. NeurIPS, 2022.&lt;/a&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231018160625.png&#34; loading=&#34;lazy&#34;&gt;
&lt;figcaption&gt;
Illustration of DDRM (source from paper)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;transformation-via-svd&#34; class=&#34;icon-inline&#34; id=&#34;transformation-via-svd&#34;&gt;Transformation via SVD&lt;a class=&#34;icon-link&#34; href=&#34;#transformation-via-svd&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Similar to &lt;a href=&#34;https://proceedings.neurips.cc/paper_files/paper/2021/hash/b5c01503041b70d41d80e3dbe31bbd8c-Abstract.html&#34;&gt;SNIPS&lt;/a&gt;, DDRM consider the singular value decomposition (SVD) of the sampling matrix $H$ as follows:&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
y&amp;amp;=Hx+z\
y&amp;amp;=U\Sigma V^\top x+z\
\Sigma^{â€ } U^{\top}y&amp;amp;=V^\top x+\Sigma^{â€ } U^{\top}z\
\bar{y}&amp;amp;=\bar{x}+\bar{z}\
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;Since $U$ is orthogonal matrix, we have $p(U^\top z) = p(z) = \mathcal{N}(0,\sigma^2_y I)$, resulting $\bar{z}^{(i)}=(\Sigma^{â€ } U^{\top}z)^{(i)} \sim \mathcal{N}(0, \frac{\sigma^2_y}{s_i^2}I)$. So after these, we transform $x$ and $y$ into the same field (&lt;strong&gt;spectral space&lt;/strong&gt;), and these two only differ by the noise $\bar{z}$, which can be drawn as follows:&lt;/p&gt;
&lt;p&gt;$$
q(\bar{y}^{(i)}|x_0)=\mathcal{N}(\bar{x}_0^{(i)},\sigma_y^2/s_i^2 )
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DDRM might be unable to cope with the wild scene, cause the variance $\sigma_y$ is often unknown.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;conditional-diffusion--generation&#34; class=&#34;icon-inline&#34; id=&#34;conditional-diffusion--generation&#34;&gt;Conditional Diffusion &amp;amp; Generation&lt;a class=&#34;icon-link&#34; href=&#34;#conditional-diffusion--generation&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The desired conditional diffusion process should (a) be a tractable Gaussian distribution, (b) employ the known $y$ to construct noisy samples as possible and (c) ensure the original marginal:&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
q(x_t|x_0) = q(\bar{x}_t|x_0, y)\cdot q(\bar{y}|x_0)=\mathcal{N}(\bar{x}_0,\sigma_t^2I) \
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;We note that $q(\bar{y}^{(i)}|x_0)=\mathcal{N}(\bar{x}_0^{(i)},\sigma_y^2/s_i^2 )$, so these conditional processes can be defined as follows:
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231018141254.png&#34; alt=&#34;image.png&#34;&gt;
From the perspective of DDIM, we can deduce the corresponding generative process via replacing $x_0$ with &amp;ldquo;the predicted version&amp;rdquo; as follows:
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231018153006.png&#34; alt=&#34;image.png&#34;&gt;
Intuitively, this construction considers different cases for each index of the spectral space. (i) If the corresponding singular value $s_i=0$, then $y$ does not directly provide any information to that index, and the update is similar to regular unconditional generation. (ii) If $s_i &amp;gt;0$, then the updates consider the information provided by $y$, which further depends on whether the measurementsâ€™ noise level $\sigma_y/s_i$ in the spectral space is larger than the noise level in the diffusion model or not.&lt;/p&gt;
&lt;p&gt;In the resulting generation, the initial sample carries a few information from $\bar{y}$, then is updated eventually by the guidance of $p_\theta(\bar{x}_t|x_t+1,y)$,  and is recovered to $x_0$ exactly by left multiplying $V$.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Although this conditional process results in a more complex ELBO objective for training, the authors proof that an optimal solution to DDPM / DDIM can also be an optimal solution to a DDRM problem, under some similar assumptions as in DDIM. So &lt;strong&gt;DDRM can be training-free&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;one-more-thing&#34; class=&#34;icon-inline&#34; id=&#34;one-more-thing&#34;&gt;One more thing&lt;a class=&#34;icon-link&#34; href=&#34;#one-more-thing&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;DDRM is applied in super-resolution, deblurring, inpainting, and colorization. There&amp;rsquo;re no much difference of the value space between original $x$ and degraded $y$ in these task. These data are almost all in the perceptible pixel space. So does SVD really work as claimed? This paper lacks relevant ablation study for that. Maybe we should introduce this into more tasks, such as compressive sensing, and see what will happen.&lt;/p&gt;
&lt;h1 id=&#34;references&#34; class=&#34;icon-inline&#34; id=&#34;references&#34;&gt;References&lt;a class=&#34;icon-link&#34; href=&#34;#references&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Kawar, Bahjat, Gregory Vaksman, and Michael Elad. &amp;ldquo;SNIPS: Solving noisy inverse problems stochastically.&amp;rdquo;Â &lt;em&gt;Advances in Neural Information Processing Systems&lt;/em&gt;Â 34 (2021): 21757-21769.&lt;/li&gt;
&lt;li&gt;Kawar, Bahjat, et al. &amp;ldquo;Denoising diffusion restoration models.&amp;rdquo;Â &lt;em&gt;Advances in Neural Information Processing Systems&lt;/em&gt;Â 35 (2022): 23593-23606.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Inverse Problem Ã— Diffusion -- Part: A</title>
      <link>https://yuhaoo00.github.io/posts/snapshots/2212diffusionforinversea/</link>
      <pubDate>Mon, 19 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://yuhaoo00.github.io/posts/snapshots/2212diffusionforinversea/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;An inverse problem seeks to recover an unknown signal from a set of observed measurements. Specifically, suppose $x\in R^n$ is an unknown signal, and $y\in R^m = Ax+z$ is a noisy observation given by m linear measurements, where the measurement acquisition process is represented by a linear operator $A\in R^{m\times n}$, and $z\in R^n$ represents a noise vector. Solving a linear inverse problem amounts to recovering the signal $x$ from its measurement $y$. Without further assumptions, the problem is ill-defined when $m&amp;lt; n$, so we additionally assume that $x$ is sampled from a prior distribution $p(x)$&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;source from &lt;a href=&#34;http://arxiv.org/abs/2111.08005&#34;&gt;Dr. Yang Song&amp;rsquo;s paper&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As unconditional generative model, Diffusion models (or Score models) can play a prior term in optimization for various ill-posed image inverse problems. Such methods are often labeled as training-free, zero-shot, unsupervised, etc.&lt;/p&gt;
&lt;p&gt;On the other hand, Diffusion models also can be trained as conditional one $s_\theta(x_t,y,t)$, where $y$ is the condition from other mode. However, this will consume a lot of resources both in the computing power and the collection of paired data $\lbrace x_i,y_i\rbrace$.&lt;/p&gt;
&lt;h2 id=&#34;medical-score-sde&#34; class=&#34;icon-inline&#34; id=&#34;medical-score-sde&#34;&gt;Medical Score-SDE&lt;a class=&#34;icon-link&#34; href=&#34;#medical-score-sde&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://arxiv.org/abs/2111.08005&#34;&gt;-&amp;gt; Yang Song, et al. in ICLR, 2022.&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231017172654.png&#34; loading=&#34;lazy&#34;&gt;
&lt;figcaption&gt;
The medical imaging problem (source from paper)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;step1-perturbing-measurements&#34; class=&#34;icon-inline&#34; id=&#34;step1-perturbing-measurements&#34;&gt;step1: Perturbing measurements&lt;a class=&#34;icon-link&#34; href=&#34;#step1-perturbing-measurements&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Since $x_t=\alpha(t)x_0+\beta(t)z$, and we set $y_t=Ax_t+\alpha(t)\epsilon$, so we have $y_t=\alpha(t)y+\beta(t)Az$.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Smart and reasonable assumption for the coefficient $+\alpha(t)\epsilon$ to avoid the subsequent diffusion of random measurement noise $\epsilon$.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;step2-generation-with-score-sde&#34; class=&#34;icon-inline&#34; id=&#34;step2-generation-with-score-sde&#34;&gt;step2: Generation with Score-SDE&lt;a class=&#34;icon-link&#34; href=&#34;#step2-generation-with-score-sde&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Using the Euler-Maruyama sampler, the generative process given by:&lt;/p&gt;
&lt;p&gt;$$
x_{t-\Delta t} = x_t-f(t)x_t\Delta t+g(t)^2s_\theta(x_t,t)\Delta t+g(t)\sqrt{\Delta t}z
$$&lt;/p&gt;
&lt;p&gt;where $s_\theta(\cdot)$ is the trained score model, $\Delta t = 1/N$ is the set discrete time, and $z\sim \mathcal{N}(0,1)$.&lt;/p&gt;
&lt;h3 id=&#34;step3-consistent-guidance&#34; class=&#34;icon-inline&#34; id=&#34;step3-consistent-guidance&#34;&gt;step3: Consistent Guidance&lt;a class=&#34;icon-link&#34; href=&#34;#step3-consistent-guidance&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231017164345.png&#34; loading=&#34;lazy&#34;&gt;
&lt;figcaption&gt;
The pipeline of medical Score-SDE&lt;/figcaption&gt;
&lt;/figure&gt;

We set the guided intermediate result as $x_t^{\prime}$, For simultaneously minimizing the distance between $x_t$ and $x_t^{\prime}$, and the distance between $x_t^{\prime}$ and the hyperplane $\lbrace x\in R^n| Ax=y_t \rbrace$, we build an  optimization problem as:&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
x_t^{\prime}&amp;amp;=\arg \min_{v\in R^n}\lbrace (1-\lambda)\Vert v-x_t \Vert_{T}^2 + \min_{u\in R^n} \lambda \Vert v-u \Vert_{T}^2 \rbrace \
s.t.\quad Au&amp;amp;=y_t
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;which has the closed-form solution as:&lt;/p&gt;
&lt;p&gt;$$
x_t^{\prime}=T^{-1}[\lambda \Lambda \mathcal{P} ^{-1}(\Lambda)y_t+(1-\lambda)\Lambda Tx_t+(1-\Lambda)Tx_t]
$$&lt;/p&gt;
&lt;p&gt;When the measurement process is noisy, we can choose $0&amp;lt;\lambda&amp;lt;1$ to allow slackness in $Ax_t^{\prime}=y_t$ (more affected by $p(x)$). When the measurement process contains no noise, the authors chosse $\lambda=1$ at the last sampling step to guarantee $Ax_0^{\prime}=y$.&lt;/p&gt;
&lt;h2 id=&#34;score-mri&#34; class=&#34;icon-inline&#34; id=&#34;score-mri&#34;&gt;Score-MRI&lt;a class=&#34;icon-link&#34; href=&#34;#score-mri&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sciencedirect.com/science/article/pii/S1361841522001268&#34;&gt;-&amp;gt; Hyungjin Chung, et al.  Medical Image Analysis, 2022.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Similar to the above, Score-MRI inserts a more simple consistency mapping after every &amp;ldquo;Predictor&amp;rdquo; and &amp;ldquo;Corrector&amp;rdquo; iteration.&lt;/p&gt;
&lt;p&gt;$$
x_i=x_i+\lambda A^\ast(y-Ax_i)=(I-\lambda A^\ast A)x_i+A^\ast y
$$&lt;/p&gt;
&lt;p&gt;where $A^\ast$ denotes the Hermitian adjoint, and $+\lambda A^\ast (y-Ax_i)$ can be viewed as a rectification for minimizing the distance between $y$ and $Ax_i$. In the hybridtype Algorithm 5 (complex domain and multi-coils for MRI), the authors start with $\lambda = 1.0$ in the first iteration, and linearly decrease the value to $\lambda=0.2$ at the last iteration.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://arxiv.org/abs/1706.00051&#34;&gt;GANCS&lt;/a&gt; has an similar rectification $(I-\Phi^{â€ }\Phi)x+\Phi^{â€ }y$, where pseudo-inverse $\Phi^{â€ }$ satisfies $\Phi\Phi^{â€ }\Phi=\Phi$, but without the scaling factor $\lambda$.  In this paper, the authors view $(I-\Phi^{â€ }\Phi)x$ as a projection onto the &lt;a href=&#34;https://dx.doi.org/10.1088/1361-6420/aaf14a&#34;&gt;nullspace&lt;/a&gt; of $\Phi$.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231017182641.png&#34; loading=&#34;lazy&#34; width=&#34;500&#34;&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;ddnm&#34; class=&#34;icon-inline&#34; id=&#34;ddnm&#34;&gt;DDNM&lt;a class=&#34;icon-link&#34; href=&#34;#ddnm&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://arxiv.org/abs/2212.00490&#34;&gt;-&amp;gt; Yinhuai Wang, et al. in ICLR, 2023.&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;noise-free&#34; class=&#34;icon-inline&#34; id=&#34;noise-free&#34;&gt;Noise-free&lt;a class=&#34;icon-link&#34; href=&#34;#noise-free&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Similar to &lt;a href=&#34;http://arxiv.org/abs/1706.00051&#34;&gt;GANCS&lt;/a&gt;, DDNM adopts a rectified estimation as:&lt;/p&gt;
&lt;p&gt;$$
x_{0|t}^{\prime}=A^{â€ }y+(I-A^{â€ }A)x_{0|t}
$$&lt;/p&gt;
&lt;p&gt;where $x_{0|t}$ is the predicted version at timestep $t$. Based on &lt;a href=&#34;http://arxiv.org/abs/2010.02502&#34;&gt;DDIM&lt;/a&gt;, the generative process can be driven by $x_{t-1}\sim \mathcal{p}(x_{t-1}|x_t,x_{0|t}^{\prime})$. So it might provide a more reliable rectification to human-perceptible $x_{0|t}$, rather than noisy $x_t$ like in &lt;a href=&#34;http://arxiv.org/abs/2010.02502&#34;&gt;Score-MRI&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Although this paper mentioned that this consistency mapping was inspired by &lt;strong&gt;range-null space decomposition&lt;/strong&gt; $x=A^{â€ }Ax+(I-A^{â€ }A)x$, but it seems to contradict with the subsequent DDNM+ for the noisy inverse problem.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;noisy&#34; class=&#34;icon-inline&#34; id=&#34;noisy&#34;&gt;Noisy&lt;a class=&#34;icon-link&#34; href=&#34;#noisy&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;$$
x_{0|t}^{\prime}=A^â€ y+(Iâˆ’A^â€ A)x_{0|t} =x_{0|t}-A^â€ (Ax_{0|t}-y)
$$&lt;/p&gt;
&lt;p&gt;In short, the authors employ two scale factors $\Sigma_t$ &amp;amp; $\Phi_t$ into range-space correction &amp;amp; generative variance, respectively.&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
x_{0|t}^{\prime}&amp;amp;= x_{0|t}-\Sigma_tA^â€ (Ax_{0|t}-y)\\
p^{\prime}(x_{t-1}|x_t,x_{0|t}^{\prime})&amp;amp;=\mathcal{N}(x_{t-1};\mu_t(x_t, x_{0|t}^{\prime}),\Phi_t I)
\end{aligned}
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;However, the performance gains from these factor are not clear, due to the absence of ablations experiments. It looks like the &amp;ldquo;Time-Travel&amp;rdquo; (a kind of redundant computing) helped a lot.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231017212649.png&#34; loading=&#34;lazy&#34; width=&#34;300&#34;&gt;
&lt;figcaption&gt;
Time-Travel (source from paper)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1 id=&#34;references&#34; class=&#34;icon-inline&#34; id=&#34;references&#34;&gt;References&lt;a class=&#34;icon-link&#34; href=&#34;#references&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Yang Song and others, â€˜Solving Inverse Problems in Medical Imaging with Score-Based Generative Modelsâ€™  in &lt;em&gt;International Conference on Learning Representations&lt;/em&gt;, 2022.&lt;/li&gt;
&lt;li&gt;Hyungjin Chung and Jong Chul Ye, â€˜Score-Based Diffusion Models for Accelerated MRIâ€™, &lt;em&gt;Medical Image Analysis&lt;/em&gt;, 80 (2022), 102479.&lt;/li&gt;
&lt;li&gt;Johannes Schwab, Stephan Antholzer, and Markus Haltmeier, â€˜Deep Null Space Learning for Inverse Problems: Convergence Analysis and Ratesâ€™, &lt;em&gt;Inverse Problems&lt;/em&gt;, 35.2 (2019), 025008.&lt;/li&gt;
&lt;li&gt;Morteza Mardani and others, â€˜Deep Generative Adversarial Networks for Compressed Sensing Automates MRIâ€™ arXiv, 2017.&lt;/li&gt;
&lt;li&gt;Yinhuai Wang, Jiwen Yu, and Jian Zhang, â€˜Zero-Shot Image Restoration Using Denoising Diffusion Null-Space Modelâ€™ in &lt;em&gt;International Conference on Learning Representations&lt;/em&gt;, 2023.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>DDPM and Early Variants</title>
      <link>https://yuhaoo00.github.io/posts/snapshots/2212ddpm/</link>
      <pubDate>Tue, 13 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://yuhaoo00.github.io/posts/snapshots/2212ddpm/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Although Diffusion Model is a new generative framework, it still has many shades of other methods.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231013140424.png&#34; loading=&#34;lazy&#34;&gt;
&lt;figcaption&gt;
Bayes&amp;rsquo; rule is all you need&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;generation--diffusion&#34; class=&#34;icon-inline&#34; id=&#34;generation--diffusion&#34;&gt;Generation &amp;amp; Diffusion&lt;a class=&#34;icon-link&#34; href=&#34;#generation--diffusion&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just like GANs realized the implicit generation through the mapping from a random gaussian vector to a natural image, Diffusion Model is doing the same thing, by multiple mappings, though. This generation can be defined as the following &lt;strong&gt;Markov chain&lt;/strong&gt; with learnable Gaussian transitions:&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
p_\theta\left(x_0\right)=\int p_\theta\left(x_{0: T}\right) \mathrm{d} x_{1: T}\\
p_\theta\left(x_{0: T}\right):=p_\theta\left(x_T\right) \prod_{t=1}^T p_\theta\left(x_{t-1} \vert x_t\right)\\
p_\theta\left(x_{t-1} \vert x_t\right):=N(x_{t-1};\mu_{\theta}(x_t,t),\Sigma_\theta(x_t,t))
\end{align}
$$&lt;/p&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231013150347.png&#34; loading=&#34;lazy&#34;&gt;
&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;Markov chain: What happens next depends only on the state of affairsÂ now. So we have $p(x_{t-1}\vert x_{t:T})=p(x_{t-1}\vert x_{t})$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Similar to VAE, we can use the posterior $q(x_{1:t} \vert x_0)$ to do the estimation for $\theta$. The difference is that $x_1,\dots,x_T$ are the latents of the same size as $x_0$, and the diffusion process (c.t. VAE encoder) $q(x_{1:T} \vert x_0)$ is fixed to a Markov chain without any learnable parameters, which can be designed as Gaussian transitions parameterized by a decreasing sequence $\alpha_{1:T}\in [0,1]^T$:&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
q(x_{1:T} \vert x_0) := \prod_{t=1}^T q\left(x_{t} \vert x_{t-1}\right) \\
q(x_t \vert x_{t-1}):=N(\frac{\sqrt{\alpha_t}}{\sqrt{\alpha_{t-1}}}x_{t-1}, (1-\frac{\alpha_t}{\alpha_{t-1}})I)
\end{align}
$$&lt;/p&gt;
&lt;p&gt;A nice property of the above design (thank to Gauss.) is that it admits sampling $x_t$ at arbitrary timestep $t$:&lt;/p&gt;
&lt;p&gt;$$
q(x_t\vert x_0)=N(x_t;\sqrt{\alpha_t}x_0, (1-\alpha_t)I)
$$&lt;/p&gt;
&lt;h2 id=&#34;training-objective&#34; class=&#34;icon-inline&#34; id=&#34;training-objective&#34;&gt;Training Objective&lt;a class=&#34;icon-link&#34; href=&#34;#training-objective&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We can use the variational lower bound (appeared in VAE) to maximize the negative log-likelihood:&lt;/p&gt;
&lt;p&gt;$$
\max_{\theta}E_{q}[\log{p_\theta(x_0)}]\leq \max_{\theta}E_{q}[\log{p_{\theta} (x_{0:T})}-\log{q(x_{1:T} \vert x_0)}]
$$&lt;/p&gt;
&lt;p&gt;which also can be driven by Jensenâ€™s inequality as in &lt;a href=&#34;https://lilianweng.github.io/posts/2021-07-11-diffusion-models/&#34; title=&#34;Lil&#39;log&#34;&gt;Lil&amp;rsquo;log&lt;/a&gt;. And we can further rewrite this object as:&lt;/p&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231013165753.png&#34; loading=&#34;lazy&#34;&gt;
&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;Using Bayes&amp;rsquo; rule, we can deduce the fact that $q(x_{t-1}\vert x_t, x_0)$ is also a gaussian distribution.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;where $L_T$ is constant. Discussing $L_{t-1}$ is one of the key contributions of DDPMs.  &lt;strong&gt;If generative variances is all fixed  $\Sigma_t = \sigma^2_t$&lt;/strong&gt;, using parameterization (fit distribution $\to$ fit mean $\to$ predict noise) and reweighting based on the empirical results, we can simplify this objective as follows:&lt;/p&gt;
&lt;p&gt;$$
L_t=E_{x_0\sim q, \epsilon\sim N(0,1)}\left[|| \epsilon_\theta(\sqrt{\alpha_t}x_0+\sqrt{1-\alpha_t}\epsilon, t)-\epsilon {||}_2^2 \right]
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NCSN vs DDPM, different ways lead to almost the same objective!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For last $L_0$, DDPMs treat it as an independent discrete decoder derived from $N(x_0;\mu_{\theta}(x_1,1), 0)$, so it can be trained by the same objective as $L_t$. Notice that this last generative process is set to noiseless to ensure the lossless codelength of discrete data.&lt;/p&gt;
&lt;p&gt;At the end, we can realize the efficient training by optimizing random terms of $L_t$ with stochastic gradient descent (Alg. 1). Correspondingly, the sampling can be exported by $p_\theta(x_{t-1}\vert x_t)$ using predicted $\epsilon_\theta(\cdot)$ (Alg. 2).&lt;/p&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231013181724.png&#34; loading=&#34;lazy&#34;&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;ddpm&#34; class=&#34;icon-inline&#34; id=&#34;ddpm&#34;&gt;DDPM+&lt;a class=&#34;icon-link&#34; href=&#34;#ddpm&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;finding-1-why-fixing-sigma2-to-beta-ortildebeta-achieve-similar-sample-quality&#34; class=&#34;icon-inline&#34; id=&#34;finding-1-why-fixing-sigma2-to-beta-ortildebeta-achieve-similar-sample-quality&#34;&gt;Finding 1: Why fixing $\sigma^2$ to $\beta$ or$\tilde{\beta}$ achieve similar sample quality?&lt;a class=&#34;icon-link&#34; href=&#34;#finding-1-why-fixing-sigma2-to-beta-ortildebeta-achieve-similar-sample-quality&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231013202424.png&#34; loading=&#34;lazy&#34; width=&#34;500&#34;&gt;
&lt;/figure&gt;

&lt;p&gt;As $\beta \approx \tilde{\beta}$ In the early process, the perceptual details generated from these two is very similar. So the other constants might not matter at all for sample quality due to decreasing nature $\frac{\beta_t}{\beta_{t-1}} \to 0$.&lt;/p&gt;
&lt;h3 id=&#34;finding-2-the-diffusion-samples-from-linear-schedule-lose-information-very-quickly&#34; class=&#34;icon-inline&#34; id=&#34;finding-2-the-diffusion-samples-from-linear-schedule-lose-information-very-quickly&#34;&gt;Finding 2: The diffusion samples from linear schedule lose information very quickly.&lt;a class=&#34;icon-link&#34; href=&#34;#finding-2-the-diffusion-samples-from-linear-schedule-lose-information-very-quickly&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231013204426.png&#34; loading=&#34;lazy&#34;&gt;
&lt;/figure&gt;

&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231013204404.png&#34; loading=&#34;lazy&#34; width=&#34;500&#34;&gt;
&lt;/figure&gt;

&lt;p&gt;In the diffusion process, these samples will soon become the noise without any information. Even if the early generation is skipped (~20%), the quality does not get much worse. It suggests that so much full noisy samples might do not contribute to generation.&lt;/p&gt;
&lt;h3 id=&#34;improvements&#34; class=&#34;icon-inline&#34; id=&#34;improvements&#34;&gt;Improvements&lt;a class=&#34;icon-link&#34; href=&#34;#improvements&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learnable variances with an interpolation between $\beta$ and $\tilde{\beta}$, driven by loss $+ \lambda L_{vlb}$.&lt;/li&gt;
&lt;li&gt;Cosine schedule has a linear drop off in the middle of the process, while changing very little near the start and the end.&lt;/li&gt;
&lt;li&gt;Resampling $L_{vlb}$ to make training stable (like a kind of dynamic weighting)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ddim&#34; class=&#34;icon-inline&#34; id=&#34;ddim&#34;&gt;DDIM&lt;a class=&#34;icon-link&#34; href=&#34;#ddim&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;more-free-diffusion-chain&#34; class=&#34;icon-inline&#34; id=&#34;more-free-diffusion-chain&#34;&gt;More free diffusion chain&lt;a class=&#34;icon-link&#34; href=&#34;#more-free-diffusion-chain&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In DDIM, the authors introduce a extended version $q(x_{t-1}\vert x_t, x_0)$, which has the same marginal noise distribution $q(x_{t}\vert x_0)$ï¼š&lt;/p&gt;
&lt;p&gt;$$
q_{\sigma}(x_{t-1} \vert x_t, x_0) = N(x_{t-1}; \sqrt{\alpha_{t-1}} x_0 + \sqrt{1 - \alpha_{t-1} - \sigma_t^2} \frac{x_t - \sqrt{\alpha_t} x_0}{\sqrt{1 - \alpha_t}}, \sigma_t^2 I)
$$&lt;/p&gt;
&lt;p&gt;Therefore, the corresponding generative process can be exported as:
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231013230807.png&#34; loading=&#34;lazy&#34;&gt;
&lt;/figure&gt;

If we set $\sigma_t^2=\tilde{\beta}_t$,  the diffusion process becomes Markovian, and the generative process becomes DDPM. And if $\sigma_t=0$, there is a deterministic generation, called DDIM.&lt;/p&gt;
&lt;h3 id=&#34;acceleration-via-subsampling&#34; class=&#34;icon-inline&#34; id=&#34;acceleration-via-subsampling&#34;&gt;Acceleration via subsampling&lt;a class=&#34;icon-link&#34; href=&#34;#acceleration-via-subsampling&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the generation, we sample a subset of S steps ${\tau_1,\dots,\tau_S}$ to form a new chain as:&lt;/p&gt;
&lt;p&gt;$$
q_{\sigma, \tau}(x_{\tau_{i-1}} \vert x_{\tau_i}, x_0) = N(x_{\tau_{i-1}}; \sqrt{\alpha_{\tau_{i-1}}} x_0 + \sqrt{1 - \alpha_{\tau_{i-1}} - \sigma_t^2} \frac{x_{\tau_i} - \sqrt{\alpha_{\tau_i}} x_0}{\sqrt{1 - \alpha_{\tau_i}}}, \sigma_{\tau_i}^2 I)
$$&lt;/p&gt;
&lt;p&gt;which can still provide high-quality samples using a much fewer number of steps.&lt;/p&gt;
&lt;h1 id=&#34;references&#34; class=&#34;icon-inline&#34; id=&#34;references&#34;&gt;References&lt;a class=&#34;icon-link&#34; href=&#34;#references&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Jonathan Ho, Ajay Jain, and Pieter Abbeel, â€˜Denoising Diffusion Probabilistic Modelsâ€™, in &lt;em&gt;Advances in Neural Information Processing Systems&lt;/em&gt;, 2020.&lt;/li&gt;
&lt;li&gt;Alexander Quinn Nichol and Prafulla Dhariwal, â€˜Improved Denoising Diffusion Probabilistic Modelsâ€™, in &lt;em&gt;Proceedings of the 38th International Conference on Machine Learning&lt;/em&gt;, 2021.&lt;/li&gt;
&lt;li&gt;Jiaming Song, Chenlin Meng, and Stefano Ermon, â€˜Denoising Diffusion Implicit Modelsâ€™, in &lt;em&gt;International Conference on Learning Representations&lt;/em&gt;, 2021.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Image Generation based on Score Model</title>
      <link>https://yuhaoo00.github.io/posts/snapshots/2212ncsn/</link>
      <pubDate>Thu, 08 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://yuhaoo00.github.io/posts/snapshots/2212ncsn/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Both likelihood-based methods and GAN methods have have some intrinsic limitations. Learning and estimating Stein score (the gradient of the log-density function $\nabla_{ x} \log p_{\text {data }}( x)$) may be a better choice than learning the data density directly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;score-estimation-for-training&#34; class=&#34;icon-inline&#34; id=&#34;score-estimation-for-training&#34;&gt;Score Estimation (for training)&lt;a class=&#34;icon-link&#34; href=&#34;#score-estimation-for-training&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We want to train a network $s_{\theta}(x)$ to estimate $\nabla_{ x} \log p_{\text {data }}( x)$, but how can we get the ground truth (the real score)? In this paper, the objective $\frac{1}{2} E_{p_{\text{data}}} \lbrack\lVert s_{\theta}( x)-\nabla_{ x} \log p_{\text{data}}( x)\rVert_2^2\rbrack$ is equivalent to the following by Score Matching:&lt;/p&gt;
&lt;p&gt;$$
E_{p_{\text{data}}}\left[tr(\nabla_{ x}s_{\theta}( x))+\frac{1}{2}\left|s_{\theta}( x))\right|_2^2\right]
$$&lt;/p&gt;
&lt;p&gt;Unfortunately, it is not easy to compute $tr(\cdot)$ for a large-scale problem. Both &lt;strong&gt;Denoising score matching&lt;/strong&gt; and &lt;strong&gt;Sliced score matching&lt;/strong&gt; are popular methods to deal with this situation. But the sliced one requires 4x computations due to the forward mode auto-differentiation. Instead, Denoising score matching try to estimate the score of noise-perturbed distribution ($q_\sigma$) as follows:&lt;/p&gt;
&lt;p&gt;$$
\frac{1}{2} E_{q_\sigma(\tilde{ x} \mid  x) p_{\text {data }}( x)}\left[\left| s_{\theta}(\tilde{ x})-\nabla_{\tilde{ x}} \log q_\sigma(\tilde{ x} \mid  x)\right|_2^2\right]
$$&lt;/p&gt;
&lt;p&gt;Minimizing this objective, we can get $s_{\theta}( x)=\nabla_{ x} \log q_{\sigma}( x)$. And if the noise is small enough $q_\sigma( x) \approx p_{\text {data }}( x)$, we will get $s_{\theta}( x)=\nabla_{ x} \log q_\sigma( x) \approx \nabla_{ x} \log p_{\text {data }}( x)$.
As $q_\sigma(\tilde{x}| x)$ can be defined as a known simple distribution, this minimization is easier than regular score matching. In this paper, they choose $q_\sigma(\tilde{x}| x) =N\left(\tilde{x} \mid x, \sigma^2 I\right)$, which leads to:&lt;/p&gt;
&lt;p&gt;$$
\ell(\theta ; \sigma) \triangleq \frac{1}{2} E_{p_{\text {data }}(x)} E_{\tilde{x} \sim N\left(x, \sigma^2 I\right)}\left[\left|\mathbf{s}_{\theta}(\tilde{x}, \sigma)+\frac{\tilde{x}-x}{\sigma^2}\right|_2^2\right]
$$&lt;/p&gt;
&lt;h2 id=&#34;langevin-dynamics-for-inference&#34; class=&#34;icon-inline&#34; id=&#34;langevin-dynamics-for-inference&#34;&gt;Langevin dynamics (for inference)&lt;a class=&#34;icon-link&#34; href=&#34;#langevin-dynamics-for-inference&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;How can we do sampling from $p_{\text {data }}( x)$ when we get a nice estimation of $\nabla_{ x} \log p_{\text {data }}( x)$? Just along the direction of this gradient? Yes, but plus more tricks.&lt;/p&gt;
&lt;p&gt;$$
x_t = x_{t-1}+\frac{\epsilon}{2} \nabla_{x} \log p\left(x_{t-1}\right)+\sqrt{\epsilon} z_t
$$&lt;/p&gt;
&lt;p&gt;The Annealed Langevin dynamics, which is based on assumptions for particle motion, can provide &lt;em&gt;more stable distribution&lt;/em&gt;! Briefly, the random noise term $\mathbf{z}_t \thicksim N(0,1)$ simulates the random motion of particles. With gradual annealing (the step size $\epsilon \to 0$), the iterative $x_t$ will approach the distribution $p(x)$.&lt;/p&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231012150556.png&#34; loading=&#34;lazy&#34; width=&#34;400&#34;&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;practical-challenges&#34; class=&#34;icon-inline&#34; id=&#34;practical-challenges&#34;&gt;Practical Challenges&lt;a class=&#34;icon-link&#34; href=&#34;#practical-challenges&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;the-manifold-hypothesis&#34; class=&#34;icon-inline&#34; id=&#34;the-manifold-hypothesis&#34;&gt;The manifold hypothesis&lt;a class=&#34;icon-link&#34; href=&#34;#the-manifold-hypothesis&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The data in the real world tend to concentrate on low dimensional manifolds embedded in a high dimensional space (a.k.a., the ambient space).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The score is &lt;em&gt;undefined&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The estimation by Score Matching &lt;em&gt;isn&amp;rsquo;t consistent&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we &lt;strong&gt;perturb the data&lt;/strong&gt; with a small Gaussian noise (make the support of data distribution is the whole space), the loss driven by SlicedScoreMatching (fast &amp;amp; faithful) will converge (Fig. 1).&lt;/p&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231012192631.png&#34; loading=&#34;lazy&#34;&gt;
&lt;figcaption&gt;
Figure 1: Left: Sliced score matching (SSM) loss w.r.t. iterations. No noise is added to data. Right: Same but data are perturbed with N(0, 0.0001).&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;low-data-density-regions&#34; class=&#34;icon-inline&#34; id=&#34;low-data-density-regions&#34;&gt;Low data density regions&lt;a class=&#34;icon-link&#34; href=&#34;#low-data-density-regions&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Our training is based on the data in high density ($\thicksim p_{\text {data }}( x)$).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The estimation in low density regions is &lt;em&gt;inaccurate.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Regular Langevin Dynamics &lt;em&gt;can&amp;rsquo;t be able to correctly recover&lt;/em&gt; the relative weights of the multi-modal distribution &lt;em&gt;in reasonable time.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we &lt;strong&gt;perturb the data by using multiple noise levels&lt;/strong&gt; (anneal down), we can fill the low density regions.&lt;/p&gt;
&lt;figure class=&#34;image&#34;&gt;
&lt;img src=&#34;https://image-1300968464.cos.ap-shanghai.myqcloud.com/Obsidian/20231012192901.png&#34; loading=&#34;lazy&#34;&gt;
&lt;/figure&gt;

&lt;p&gt;So naturally, we can kill three birds with Denoising Score Matching! Large-scale estimation, Whole space support, and Filling low density regions.
(Indeed, the authors emphasize that empirically sliced score matching can train NCSNs as well as denoising score matching.)&lt;/p&gt;
&lt;h2 id=&#34;one-more-thing&#34; class=&#34;icon-inline&#34; id=&#34;one-more-thing&#34;&gt;One More Thing&lt;a class=&#34;icon-link&#34; href=&#34;#one-more-thing&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the score matching, the authors approximately have $\left| s_{\theta}( x, \sigma)\right|_2 \propto 1 / \sigma$, so they choose $\lambda (\sigma) = \sigma^2$ to make the order magnitude of loss under various noise levels roughly the same, and independent of $\sigma$.&lt;/p&gt;
&lt;p&gt;$$
\mathcal{L}\left(\theta ;\lbrace\sigma_i \rbrace_{i=1}^{L}\right) \triangleq \frac{1}{L} \sum_{i=1}^L \lambda\left(\sigma_i\right) \ell\left(\theta ; \sigma_i\right)
$$&lt;/p&gt;
&lt;p&gt;Correspondingly, in the langevin dynamics, they choose $\alpha_i \propto \sigma^2$ to make the order magnitude of &amp;ldquo;signal-to-noise ratio&amp;rdquo; independent of $\sigma$.&lt;/p&gt;
&lt;h1 id=&#34;references&#34; class=&#34;icon-inline&#34; id=&#34;references&#34;&gt;References&lt;a class=&#34;icon-link&#34; href=&#34;#references&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34;&gt;
  &lt;path stroke=&#34;none&#34; d=&#34;M0 0h24v24H0z&#34; fill=&#34;none&#34; /&gt;
  &lt;path d=&#34;M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5&#34; /&gt;
  &lt;path d=&#34;M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5&#34; /&gt;
&lt;/svg&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Yang Song and Stefano Ermon, â€˜Generative Modeling by Estimating Gradients of the Data Distributionâ€™, in &lt;em&gt;Advances in Neural Information Processing Systems&lt;/em&gt;, 2019.&lt;/li&gt;
&lt;li&gt;Yang Song and others, â€˜Score-Based Generative Modeling through Stochastic Differential Equationsâ€™, in &lt;em&gt;International Conference on Learning Representations&lt;/em&gt;, 2021.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title></title>
      <link>https://yuhaoo00.github.io/posts/idea/2206maeandtransferlearning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yuhaoo00.github.io/posts/idea/2206maeandtransferlearning/</guid>
      <description></description>
    </item>
    </channel>
</rss>
