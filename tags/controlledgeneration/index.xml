<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ControlledGeneration on Mem.Capsule</title>
    <link>https://yuhaoo00.github.io/tags/controlledgeneration/</link>
    <description>Recent content in ControlledGeneration on Mem.Capsule</description>
    <image>
      <title>Mem.Capsule</title>
      <url>https://yuhaoo00.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://yuhaoo00.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 24 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://yuhaoo00.github.io/tags/controlledgeneration/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Detailed Design in ControlNet</title>
      <link>https://yuhaoo00.github.io/posts/analysis/2302contorlnet/</link>
      <pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yuhaoo00.github.io/posts/analysis/2302contorlnet/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Inverse Problem × Diffusion -- Part: B</title>
      <link>https://yuhaoo00.github.io/posts/snapshots/2212diffusionforinverseb/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yuhaoo00.github.io/posts/snapshots/2212diffusionforinverseb/</guid>
      <description>DDRM -&amp;gt; Bahjat Kawar, et al. NeurIPS, 2022. Illustration of DDRM (source from paper)
Transformation via SVD Similar to SNIPS, DDRM consider the singular value decomposition (SVD) of the sampling matrix $H$ as follows: $$ \begin{aligned} y&amp;amp;=Hx+z\ y&amp;amp;=U\Sigma V^\top x+z\ \Sigma^{†} U^{\top}y&amp;amp;=V^\top x+\Sigma^{†} U^{\top}z\ \bar{y}&amp;amp;=\bar{x}+\bar{z}\ \end{aligned} $$ Since $U$ is orthogonal matrix, we have $p(U^\top z) = p(z) = \mathcal{N}(0,\sigma^2_y I)$, resulting $\bar{z}^{(i)}=(\Sigma^{†} U^{\top}z)^{(i)} \sim \mathcal{N}(0, \frac{\sigma^2_y}{s_i^2}I)$. So after these, we transform $x$ and $y$ into the same field (spectral space), and these two only differ by the noise $\bar{z}$, which can be drawn as follows: $$ q(\bar{y}^{(i)}|x_0)=\mathcal{N}(\bar{x}_0^{(i)},\sigma_y^2/s_i^2 ) $$</description>
    </item>
    
    <item>
      <title>Inverse Problem × Diffusion -- Part: A</title>
      <link>https://yuhaoo00.github.io/posts/snapshots/2212diffusionforinversea/</link>
      <pubDate>Mon, 19 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yuhaoo00.github.io/posts/snapshots/2212diffusionforinversea/</guid>
      <description>”An inverse problem seeks to recover an unknown signal from a set of observed measurements. Specifically, suppose $x\in R^n$ is an unknown signal, and $y\in R^m = Ax+z$ is a noisy observation given by m linear measurements, where the measurement acquisition process is represented by a linear operator $A\in R^{m\times n}$, and $z\in R^n$ represents a noise vector. Solving a linear inverse problem amounts to recovering the signal $x$ from its measurement $y$.</description>
    </item>
    
  </channel>
</rss>
