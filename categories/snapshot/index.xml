<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Snapshot on Mem.Capsule</title>
    <link>https://yuhaoo00.github.io/categories/snapshot/</link>
    <description>Recent content in Snapshot on Mem.Capsule</description>
    <image>
      <title>Mem.Capsule</title>
      <url>https://yuhaoo00.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://yuhaoo00.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 24 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://yuhaoo00.github.io/categories/snapshot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Paper Snapshot] Adding Conditional Control to Text-to-Image Diffusion Models</title>
      <link>https://yuhaoo00.github.io/posts/snapshots/adding-conditional-control-to-text-to-image-diffusion-models/</link>
      <pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://yuhaoo00.github.io/posts/snapshots/adding-conditional-control-to-text-to-image-diffusion-models/</guid>
      <description></description>
    </item>
    
    <item>
      <title>[Paper Snapshot] Generative Modeling by Estimating Gradients of the Data Distribution</title>
      <link>https://yuhaoo00.github.io/posts/snapshots/generative-modeling-by-estimating-gradients-of-the-data-distribution/</link>
      <pubDate>Thu, 08 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yuhaoo00.github.io/posts/snapshots/generative-modeling-by-estimating-gradients-of-the-data-distribution/</guid>
      <description>Both likelihood-based methods and GAN methods have have some intrinsic limitations. Learning and estimating Stein score (the gradient of the log-density function) may be a better choice than learning the data density directly.
Score Estimation (for training) We want to train a network $s_{\theta}(x)$ to estimate $\nabla_{\mathbf{x}} \log p_{\text {data }}(\mathbf{x})$, but how can we get the ground truth (real score)? In this paper, the objective $\frac{1}{2} \mathbb{E}{p{\text {data }}}\left[\left|\mathbf{s}{\boldsymbol{\theta}}(\mathbf{x})-\nabla{\mathbf{x}} \log p_{\text {data }}(\mathbf{x})\right|_2^2\right]$ is equivalent to the following by Score Matching:</description>
    </item>
    
  </channel>
</rss>
